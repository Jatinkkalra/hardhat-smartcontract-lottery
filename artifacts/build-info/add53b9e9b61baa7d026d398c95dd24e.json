{"id":"add53b9e9b61baa7d026d398c95dd24e","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/lottery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// Objective:\n// 1. Enter the lottery (paying some amount)\n// 2. Pick a random winner (verifiably random) (Winner to be selected once a parameter is satisfied. Eg: time, asset price, money in liquidity pool etc)\n// 3. Completely automated:\n//  * The following should be true in order to return true:\n//  * i. Our time internal should have passed\n//  * ii. The lottery should have atleast 1 player, and have some ETH\n//  * iii. Our subscription is funded with LINK\n//  * iv. The lottery should be in an \"open\" state.\n\n// As we are picking random winner (2) and we have some event driven execution (3), we will use Chainlink Oracles\n// Aka Chainlink Oracles for Randomness and Automated Execution (ie Chainlink Keepers)\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\nerror Lottery__NotEnoughETHEntered();\nerror Lottery__WinnerTransferFailed();\nerror Lottery__NotOpen();\nerror Lottery_checkUpKeepfalse(\n    uint256 currentBalance,\n    uint256 numPlayers,\n    uint256 lotteryState\n);\n\n/**\n * @title A sample lottery contract\n * @author Jatin Kalra\n * @notice A contract for creating an untamperable decentralised smart contract\n * @dev This implements Chainlink VRF V2 & Chainlink Keepers\n */\n\ncontract Lottery is\n    VRFConsumerBaseV2 /* Inheritance for overriding the internal function from \"./node_modules\" */,\n    KeeperCompatibleInterface\n{\n    // Type Declaration\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    } // in background: uint256 0 = OPEN, 1 = CALCULATING\n\n    // State Variables\n    uint256 private immutable i_entranceFee; // minimum price // A storage var\n    address payable[] private s_players; // payable addresses as if one of them wins, we would be paying them\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // this is a contract\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private immutable i_callbackGasLimit;\n    uint32 private constant NUM_WORDS = 1;\n\n    // Lottery Variables (new section for state variables)\n    address private s_recentWinner;\n    LotteryState private s_lotteryState; // To keep track of contract status (OPEN, CALCULATING) // Other method: uint256 private s_state;\n    uint256 private s_lastTimeStamp; // To keep track of block.timestamps\n    uint256 private i_interval; // interval between each winner\n\n    // Events\n    event LotteryEnter(address indexed player);\n    event RequestedLotteryWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed winner);\n\n    // Functions\n    constructor(\n        address vrfCoordinatorV2, // contract address\n        uint256 entranceFee,\n        bytes32 gasLane /* or keyHash */,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_lotteryState = LotteryState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_interval = interval;\n    }\n\n    // Objective (1/3: Enter the lottery)\n    function enterLottery() public payable {\n        // Other method: require (msg.value > i_entranceFee, \"Not Enough ETH!\")\n        if (msg.value < i_entranceFee) {\n            revert Lottery__NotEnoughETHEntered();\n        }\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        s_players.push(payable(msg.sender));\n\n        // Emit an Event whenever we update a dynamic array or mapping\n        emit LotteryEnter(msg.sender);\n    }\n\n    // Objective (3/3: Completely automated)\n\n    /**\n     * @dev This is a function that Chainlink Keepers nodes call\n     * They look for the `upkeepNeeded` to return true\n     * The following should be true in order to return true:\n     * i. Our time internal should have passed\n     * ii. The lottery should have atleast 1 player, and have some ETH\n     * iii. Our subscription is funded with LINK\n     * iv. The lottery should be in an \"open\" state.\n     */\n    function checkUpkeep(\n        bytes memory /* checkData */\n    )\n        public\n        override\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\n    {\n        //  iv. The lottery should be in an \"open\" state.\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\n\n        // i. Our time internal should have passed (ie: (current block.timestamp - last block.timestamp) > winner interval)\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n\n        //  ii. The lottery should have atleast 1 player, and have some ETH\n        bool hasPlayers = (s_players.length > 0);\n\n        //  iii. Our subscription is funded with LINK\n        bool hasBalance = (address(this).balance > 0);\n\n        // Checking if all booleans are true or not, in order to restart lottery\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    // Objective (2/3: Pick a random winner)\n    // To pick a random number, a 2 transaction process: Request a random number (1/2); Once requested, do something with it (2/2)\n    // Request a random number (1/2)\n    // function requestRandomWinner() external {\n    function performUpkeep(bytes calldata /*performData*/) external {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\"); // checking if heckUpKeep is true\n        if (!upkeepNeeded) {\n            revert Lottery_checkUpKeepfalse(\n                address(this).balance,\n                s_players.length,\n                uint256(s_lotteryState)\n            );\n        }\n\n        s_lotteryState = LotteryState.CALCULATING; // Updating status using enum\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane, // aka keyHash; aka max gas price you are willing to pay for a request in wei; aka setting a gas ceiling\n            i_subscriptionId, // aka a uint64 subscription ID that this contract uses for funding requests\n            REQUEST_CONFIRMATIONS, // A uint16 which says how many confirmations the chainlink node should wait before responding\n            i_callbackGasLimit, // A uint32 which sets gas limit for callback request aka `fulfillRandomWords()`\n            NUM_WORDS // a uint32 about how many random number we want to get\n        );\n        emit RequestedLotteryWinner(requestId);  // This emit is redundant as its already coded in vrfcoordinatorv2mock\n\n    }\n\n    // Once requested, do something with it (2/2); Here: Pick a random winner from the player's array and send him the money\n    function fulfillRandomWords(\n        uint256 /* requestId */,\n        uint256[] memory randomWords\n    ) internal override {\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\n        address payable recentWinner = s_players[indexOfWinner];\n        s_recentWinner = recentWinner;\n        s_lotteryState = LotteryState.OPEN; // Changing status to open after winner selection\n\n        // Sending money to winner\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Lottery__WinnerTransferFailed();\n        } // error report\n        // Keeping a list of all winners\n        emit WinnerPicked(recentWinner);\n\n        // Resetting array & timestamp\n        s_players = new address payable[](0);\n        s_lastTimeStamp = block.timestamp;\n    }\n\n    // View & Pure Functions\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getPlayers(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getNumberOfPlayers() public view returns (uint256) {\n        return s_players.length;\n    }\n\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/lottery.sol:118:37:\n    |\n118 |         returns (bool upkeepNeeded, bytes memory /*performData*/)\n    |                                     ^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":4590,"file":"contracts/lottery.sol","start":4578},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n   --> contracts/lottery.sol:113:5:\n    |\n113 |     function checkUpkeep(\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":5335,"file":"contracts/lottery.sol","start":4445},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6721:6:0","memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6792:6:0","memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","exportedSymbols":{"KeeperCompatibleInterface":[76]},"id":77,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"KeeperCompatibleInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":76,"linearizedBaseContracts":[76],"name":"KeeperCompatibleInterface","nameLocation":"67:25:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"97:985:1","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1094:11:1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"checkData","nameLocation":"1121:9:1","nodeType":"VariableDeclaration","scope":69,"src":"1106:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1106:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1105:26:1"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1155:12:1","nodeType":"VariableDeclaration","scope":69,"src":"1150:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":64,"name":"bool","nodeType":"ElementaryTypeName","src":"1150:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"performData","nameLocation":"1182:11:1","nodeType":"VariableDeclaration","scope":69,"src":"1169:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":66,"name":"bytes","nodeType":"ElementaryTypeName","src":"1169:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1149:45:1"},"scope":76,"src":"1085:110:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1199:1003:1","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":75,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2214:13:1","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"performData","nameLocation":"2243:11:1","nodeType":"VariableDeclaration","scope":75,"src":"2228:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":71,"name":"bytes","nodeType":"ElementaryTypeName","src":"2228:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2227:28:1"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2264:0:1"},"scope":76,"src":"2205:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":77,"src":"57:2210:1","usedErrors":[]}],"src":"32:2236:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[165]},"id":166,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":78,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":165,"linearizedBaseContracts":[165],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"97:267:2","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":89,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:2","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"392:2:2"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"437:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":81,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"451:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":83,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"465:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":85,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":86,"nodeType":"ArrayTypeName","src":"465:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:2"},"scope":165,"src":"367:121:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"492:1511:2","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":105,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:2","nodeType":"FunctionDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:2","nodeType":"VariableDeclaration","scope":105,"src":"2039:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":91,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"subId","nameLocation":"2067:5:2","nodeType":"VariableDeclaration","scope":105,"src":"2060:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":93,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:2","nodeType":"VariableDeclaration","scope":105,"src":"2078:34:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":95,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:2","nodeType":"VariableDeclaration","scope":105,"src":"2118:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":97,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:2","nodeType":"VariableDeclaration","scope":105,"src":"2147:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":99,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:2"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:2","nodeType":"VariableDeclaration","scope":105,"src":"2185:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:2"},"scope":165,"src":"2006:198:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2208:384:2","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":111,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:2","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"2622:2:2"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"subId","nameLocation":"2650:5:2","nodeType":"VariableDeclaration","scope":111,"src":"2643:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":108,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:2"},"scope":165,"src":"2595:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"2661:381:2","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:2","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"subId","nameLocation":"3077:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3070:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":113,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:2"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"balance","nameLocation":"3133:7:2","nodeType":"VariableDeclaration","scope":126,"src":"3126:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":116,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":119,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:2","nodeType":"VariableDeclaration","scope":126,"src":"3148:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":118,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":121,"mutability":"mutable","name":"owner","nameLocation":"3179:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3171:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:2","nodeType":"VariableDeclaration","scope":126,"src":"3192:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":123,"nodeType":"ArrayTypeName","src":"3192:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:2"},"scope":165,"src":"3045:180:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"3229:164:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":134,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:2","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"subId","nameLocation":"3445:5:2","nodeType":"VariableDeclaration","scope":134,"src":"3438:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":128,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:2","nodeType":"VariableDeclaration","scope":134,"src":"3452:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:2"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"3478:0:2"},"scope":165,"src":"3396:83:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"3483:212:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:2","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"subId","nameLocation":"3746:5:2","nodeType":"VariableDeclaration","scope":140,"src":"3739:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":136,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:2"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"3761:0:2"},"scope":165,"src":"3698:64:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"3766:170:2","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":148,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:2","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"subId","nameLocation":"3967:5:2","nodeType":"VariableDeclaration","scope":148,"src":"3960:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":142,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:2","nodeType":"VariableDeclaration","scope":148,"src":"3974:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":144,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:2"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"4000:0:2"},"scope":165,"src":"3939:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"4005:172:2","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":156,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:2","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"subId","nameLocation":"4211:5:2","nodeType":"VariableDeclaration","scope":156,"src":"4204:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":150,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:2","nodeType":"VariableDeclaration","scope":156,"src":"4218:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"4244:0:2"},"scope":165,"src":"4180:65:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"4249:140:2","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":164,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:2","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"subId","nameLocation":"4427:5:2","nodeType":"VariableDeclaration","scope":164,"src":"4420:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":158,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"to","nameLocation":"4442:2:2","nodeType":"VariableDeclaration","scope":164,"src":"4434:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:2"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"4454:0:2"},"scope":165,"src":"4392:63:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":166,"src":"57:4400:2","usedErrors":[]}],"src":"32:4426:2"},"id":2},"contracts/lottery.sol":{"ast":{"absolutePath":"contracts/lottery.sol","exportedSymbols":{"KeeperCompatibleInterface":[76],"Lottery":[586],"Lottery__NotEnoughETHEntered":[172],"Lottery__NotOpen":[176],"Lottery__WinnerTransferFailed":[174],"Lottery_checkUpKeepfalse":[184],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[165]},"id":587,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":167,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":168,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":587,"sourceUnit":58,"src":"777:61:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":587,"sourceUnit":166,"src":"839:80:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","id":170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":587,"sourceUnit":77,"src":"920:80:3","symbolAliases":[],"unitAlias":""},{"errorSelector":"ec269fd1","id":172,"name":"Lottery__NotEnoughETHEntered","nameLocation":"1008:28:3","nodeType":"ErrorDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[],"src":"1036:2:3"},"src":"1002:37:3"},{"errorSelector":"061104de","id":174,"name":"Lottery__WinnerTransferFailed","nameLocation":"1046:29:3","nodeType":"ErrorDefinition","parameters":{"id":173,"nodeType":"ParameterList","parameters":[],"src":"1075:2:3"},"src":"1040:38:3"},{"errorSelector":"e76be6fc","id":176,"name":"Lottery__NotOpen","nameLocation":"1085:16:3","nodeType":"ErrorDefinition","parameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"1101:2:3"},"src":"1079:25:3"},{"errorSelector":"3c96b78a","id":184,"name":"Lottery_checkUpKeepfalse","nameLocation":"1111:24:3","nodeType":"ErrorDefinition","parameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"currentBalance","nameLocation":"1149:14:3","nodeType":"VariableDeclaration","scope":184,"src":"1141:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":177,"name":"uint256","nodeType":"ElementaryTypeName","src":"1141:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"numPlayers","nameLocation":"1177:10:3","nodeType":"VariableDeclaration","scope":184,"src":"1169:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1169:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"lotteryState","nameLocation":"1201:12:3","nodeType":"VariableDeclaration","scope":184,"src":"1193:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"1193:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1135:80:3"},"src":"1105:111:3"},{"abstract":false,"baseContracts":[{"baseName":{"id":186,"name":"VRFConsumerBaseV2","nameLocations":["1451:17:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1451:17:3"},"id":187,"nodeType":"InheritanceSpecifier","src":"1451:17:3"},{"baseName":{"id":188,"name":"KeeperCompatibleInterface","nameLocations":["1551:25:3"],"nodeType":"IdentifierPath","referencedDeclaration":76,"src":"1551:25:3"},"id":189,"nodeType":"InheritanceSpecifier","src":"1551:25:3"}],"canonicalName":"Lottery","contractDependencies":[],"contractKind":"contract","documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"1218:207:3","text":" @title A sample lottery contract\n @author Jatin Kalra\n @notice A contract for creating an untamperable decentralised smart contract\n @dev This implements Chainlink VRF V2 & Chainlink Keepers"},"fullyImplemented":true,"id":586,"linearizedBaseContracts":[586,76,57],"name":"Lottery","nameLocation":"1436:7:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Lottery.LotteryState","id":192,"members":[{"id":190,"name":"OPEN","nameLocation":"1635:4:3","nodeType":"EnumValue","src":"1635:4:3"},{"id":191,"name":"CALCULATING","nameLocation":"1649:11:3","nodeType":"EnumValue","src":"1649:11:3"}],"name":"LotteryState","nameLocation":"1612:12:3","nodeType":"EnumDefinition","src":"1607:59:3"},{"constant":false,"id":194,"mutability":"immutable","name":"i_entranceFee","nameLocation":"1773:13:3","nodeType":"VariableDeclaration","scope":586,"src":"1747:39:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":193,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":197,"mutability":"mutable","name":"s_players","nameLocation":"1852:9:3","nodeType":"VariableDeclaration","scope":586,"src":"1826:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"1826:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":196,"nodeType":"ArrayTypeName","src":"1826:17:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":200,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"1980:16:3","nodeType":"VariableDeclaration","scope":586,"src":"1936:60:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":199,"nodeType":"UserDefinedTypeName","pathNode":{"id":198,"name":"VRFCoordinatorV2Interface","nameLocations":["1936:25:3"],"nodeType":"IdentifierPath","referencedDeclaration":165,"src":"1936:25:3"},"referencedDeclaration":165,"src":"1936:25:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":202,"mutability":"immutable","name":"i_gasLane","nameLocation":"2050:9:3","nodeType":"VariableDeclaration","scope":586,"src":"2024:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":201,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2024:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":204,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"2090:16:3","nodeType":"VariableDeclaration","scope":586,"src":"2065:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":203,"name":"uint64","nodeType":"ElementaryTypeName","src":"2065:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":true,"id":207,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"2136:21:3","nodeType":"VariableDeclaration","scope":586,"src":"2112:49:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":205,"name":"uint16","nodeType":"ElementaryTypeName","src":"2112:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2160:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":false,"id":209,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"2192:18:3","nodeType":"VariableDeclaration","scope":586,"src":"2167:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":208,"name":"uint32","nodeType":"ElementaryTypeName","src":"2167:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":212,"mutability":"constant","name":"NUM_WORDS","nameLocation":"2240:9:3","nodeType":"VariableDeclaration","scope":586,"src":"2216:37:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":210,"name":"uint32","nodeType":"ElementaryTypeName","src":"2216:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2252:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":214,"mutability":"mutable","name":"s_recentWinner","nameLocation":"2335:14:3","nodeType":"VariableDeclaration","scope":586,"src":"2319:30:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"2319:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":217,"mutability":"mutable","name":"s_lotteryState","nameLocation":"2376:14:3","nodeType":"VariableDeclaration","scope":586,"src":"2355:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"},"typeName":{"id":216,"nodeType":"UserDefinedTypeName","pathNode":{"id":215,"name":"LotteryState","nameLocations":["2355:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":192,"src":"2355:12:3"},"referencedDeclaration":192,"src":"2355:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"visibility":"private"},{"constant":false,"id":219,"mutability":"mutable","name":"s_lastTimeStamp","nameLocation":"2510:15:3","nodeType":"VariableDeclaration","scope":586,"src":"2494:31:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"2494:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":221,"mutability":"mutable","name":"i_interval","nameLocation":"2584:10:3","nodeType":"VariableDeclaration","scope":586,"src":"2568:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":220,"name":"uint256","nodeType":"ElementaryTypeName","src":"2568:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"anonymous":false,"eventSelector":"1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c","id":225,"name":"LotteryEnter","nameLocation":"2653:12:3","nodeType":"EventDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"2682:6:3","nodeType":"VariableDeclaration","scope":225,"src":"2666:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":222,"name":"address","nodeType":"ElementaryTypeName","src":"2666:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2665:24:3"},"src":"2647:43:3"},{"anonymous":false,"eventSelector":"ebf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c","id":229,"name":"RequestedLotteryWinner","nameLocation":"2701:22:3","nodeType":"EventDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"2740:9:3","nodeType":"VariableDeclaration","scope":229,"src":"2724:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":226,"name":"uint256","nodeType":"ElementaryTypeName","src":"2724:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2723:27:3"},"src":"2695:56:3"},{"anonymous":false,"eventSelector":"5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df","id":233,"name":"WinnerPicked","nameLocation":"2762:12:3","nodeType":"EventDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"2791:6:3","nodeType":"VariableDeclaration","scope":233,"src":"2775:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"2775:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2774:24:3"},"src":"2756:43:3"},{"body":{"id":287,"nodeType":"Block","src":"3091:353:3","statements":[{"expression":{"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":251,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"3101:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":252,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"3117:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3101:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":254,"nodeType":"ExpressionStatement","src":"3101:27:3"},{"expression":{"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":255,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"3138:16:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":257,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3183:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":256,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"3157:25:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$165_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3157:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"src":"3138:62:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"id":260,"nodeType":"ExpressionStatement","src":"3138:62:3"},{"expression":{"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":261,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"3210:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":262,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"3222:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3210:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":264,"nodeType":"ExpressionStatement","src":"3210:19:3"},{"expression":{"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":265,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"3239:16:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":266,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"3258:14:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3239:33:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":268,"nodeType":"ExpressionStatement","src":"3239:33:3"},{"expression":{"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":269,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"3282:18:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":270,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"3303:16:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3282:37:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":272,"nodeType":"ExpressionStatement","src":"3282:37:3"},{"expression":{"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":273,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"3329:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":274,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3346:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Lottery.LotteryState)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3359:4:3","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":190,"src":"3346:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"src":"3329:34:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"id":277,"nodeType":"ExpressionStatement","src":"3329:34:3"},{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":278,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"3373:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":279,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3391:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3397:9:3","memberName":"timestamp","nodeType":"MemberAccess","src":"3391:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3373:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":282,"nodeType":"ExpressionStatement","src":"3373:33:3"},{"expression":{"id":285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":283,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3416:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":284,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"3429:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3416:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":286,"nodeType":"ExpressionStatement","src":"3416:21:3"}]},"id":288,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":248,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3073:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":249,"kind":"baseConstructorSpecifier","modifierName":{"id":247,"name":"VRFConsumerBaseV2","nameLocations":["3055:17:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"3055:17:3"},"nodeType":"ModifierInvocation","src":"3055:35:3"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"2851:16:3","nodeType":"VariableDeclaration","scope":288,"src":"2843:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"2843:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"entranceFee","nameLocation":"2905:11:3","nodeType":"VariableDeclaration","scope":288,"src":"2897:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2897:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"gasLane","nameLocation":"2934:7:3","nodeType":"VariableDeclaration","scope":288,"src":"2926:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2926:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"subscriptionId","nameLocation":"2975:14:3","nodeType":"VariableDeclaration","scope":288,"src":"2968:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":240,"name":"uint64","nodeType":"ElementaryTypeName","src":"2968:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"3006:16:3","nodeType":"VariableDeclaration","scope":288,"src":"2999:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":242,"name":"uint32","nodeType":"ElementaryTypeName","src":"2999:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":245,"mutability":"mutable","name":"interval","nameLocation":"3040:8:3","nodeType":"VariableDeclaration","scope":288,"src":"3032:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"3032:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2833:221:3"},"returnParameters":{"id":250,"nodeType":"ParameterList","parameters":[],"src":"3091:0:3"},"scope":586,"src":"2822:622:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":324,"nodeType":"Block","src":"3531:445:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":291,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3625:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3629:5:3","memberName":"value","nodeType":"MemberAccess","src":"3625:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":293,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"3637:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3625:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":299,"nodeType":"IfStatement","src":"3621:93:3","trueBody":{"id":298,"nodeType":"Block","src":"3652:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":295,"name":"Lottery__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"3673:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3673:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":297,"nodeType":"RevertStatement","src":"3666:37:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":300,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"3727:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":301,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3745:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Lottery.LotteryState)"}},"id":302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3758:4:3","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":190,"src":"3745:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"src":"3727:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":308,"nodeType":"IfStatement","src":"3723:91:3","trueBody":{"id":307,"nodeType":"Block","src":"3764:50:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":304,"name":"Lottery__NotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"3785:16:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3785:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":306,"nodeType":"RevertStatement","src":"3778:25:3"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":314,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3846:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3850:6:3","memberName":"sender","nodeType":"MemberAccess","src":"3846:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3838:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":312,"name":"address","nodeType":"ElementaryTypeName","src":"3838:8:3","stateMutability":"payable","typeDescriptions":{}}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3838:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":309,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"3823:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3833:4:3","memberName":"push","nodeType":"MemberAccess","src":"3823:14:3","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3823:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":318,"nodeType":"ExpressionStatement","src":"3823:35:3"},{"eventCall":{"arguments":[{"expression":{"id":320,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3958:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3962:6:3","memberName":"sender","nodeType":"MemberAccess","src":"3958:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"LotteryEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"3945:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3945:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":323,"nodeType":"EmitStatement","src":"3940:29:3"}]},"functionSelector":"c1af5785","id":325,"implemented":true,"kind":"function","modifiers":[],"name":"enterLottery","nameLocation":"3501:12:3","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[],"src":"3513:2:3"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"3531:0:3"},"scope":586,"src":"3492:484:3","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[69],"body":{"id":385,"nodeType":"Block","src":"4612:723:3","statements":[{"assignments":[337],"declarations":[{"constant":false,"id":337,"mutability":"mutable","name":"isOpen","nameLocation":"4685:6:3","nodeType":"VariableDeclaration","scope":385,"src":"4680:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":336,"name":"bool","nodeType":"ElementaryTypeName","src":"4680:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":343,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":338,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"4695:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Lottery.LotteryState)"}},"id":339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4708:4:3","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":190,"src":"4695:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":340,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"4716:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"src":"4695:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":342,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4694:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4680:51:3"},{"assignments":[345],"declarations":[{"constant":false,"id":345,"mutability":"mutable","name":"timePassed","nameLocation":"4871:10:3","nodeType":"VariableDeclaration","scope":385,"src":"4866:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":344,"name":"bool","nodeType":"ElementaryTypeName","src":"4866:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":354,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":346,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4886:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4892:9:3","memberName":"timestamp","nodeType":"MemberAccess","src":"4886:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":348,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"4904:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4886:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":350,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4885:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":351,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"4923:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4885:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":353,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4884:50:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4866:68:3"},{"assignments":[356],"declarations":[{"constant":false,"id":356,"mutability":"mutable","name":"hasPlayers","nameLocation":"5026:10:3","nodeType":"VariableDeclaration","scope":385,"src":"5021:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":355,"name":"bool","nodeType":"ElementaryTypeName","src":"5021:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":362,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":357,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"5040:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5050:6:3","memberName":"length","nodeType":"MemberAccess","src":"5040:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5059:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5040:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":361,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5039:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5021:40:3"},{"assignments":[364],"declarations":[{"constant":false,"id":364,"mutability":"mutable","name":"hasBalance","nameLocation":"5131:10:3","nodeType":"VariableDeclaration","scope":385,"src":"5126:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":363,"name":"bool","nodeType":"ElementaryTypeName","src":"5126:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":373,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":367,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5153:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Lottery_$586","typeString":"contract Lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lottery_$586","typeString":"contract Lottery"}],"id":366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5145:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"5145:7:3","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5145:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5159:7:3","memberName":"balance","nodeType":"MemberAccess","src":"5145:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5169:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5145:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":372,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5144:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5126:45:3"},{"expression":{"id":383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":374,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"5263:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":375,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"5279:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":376,"name":"timePassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"5289:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5279:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":378,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"5303:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5279:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":380,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5317:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5279:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":382,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5278:50:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5263:65:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":384,"nodeType":"ExpressionStatement","src":"5263:65:3"}]},"documentation":{"id":326,"nodeType":"StructuredDocumentation","src":"4028:412:3","text":" @dev This is a function that Chainlink Keepers nodes call\n They look for the `upkeepNeeded` to return true\n The following should be true in order to return true:\n i. Our time internal should have passed\n ii. The lottery should have atleast 1 player, and have some ETH\n iii. Our subscription is funded with LINK\n iv. The lottery should be in an \"open\" state."},"functionSelector":"6e04ff0d","id":386,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"4454:11:3","nodeType":"FunctionDefinition","overrides":{"id":330,"nodeType":"OverrideSpecifier","overrides":[],"src":"4533:8:3"},"parameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":386,"src":"4475:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":327,"name":"bytes","nodeType":"ElementaryTypeName","src":"4475:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4465:44:3"},"returnParameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"4564:12:3","nodeType":"VariableDeclaration","scope":386,"src":"4559:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":331,"name":"bool","nodeType":"ElementaryTypeName","src":"4559:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":386,"src":"4578:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":333,"name":"bytes","nodeType":"ElementaryTypeName","src":"4578:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4558:49:3"},"scope":586,"src":"4445:890:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[75],"body":{"id":435,"nodeType":"Block","src":"5667:1137:3","statements":[{"assignments":[392,null],"declarations":[{"constant":false,"id":392,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"5683:12:3","nodeType":"VariableDeclaration","scope":435,"src":"5678:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":391,"name":"bool","nodeType":"ElementaryTypeName","src":"5678:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":396,"initialValue":{"arguments":[{"hexValue":"","id":394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5713:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":393,"name":"checkUpkeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"5701:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5701:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5677:39:3"},{"condition":{"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5764:13:3","subExpression":{"id":397,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"5765:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":414,"nodeType":"IfStatement","src":"5760:203:3","trueBody":{"id":413,"nodeType":"Block","src":"5779:184:3","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":402,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5850:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Lottery_$586","typeString":"contract Lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lottery_$586","typeString":"contract Lottery"}],"id":401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5842:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"5842:7:3","typeDescriptions":{}}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5842:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5856:7:3","memberName":"balance","nodeType":"MemberAccess","src":"5842:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":405,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"5881:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5891:6:3","memberName":"length","nodeType":"MemberAccess","src":"5881:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":409,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"5923:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}],"id":408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5915:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"5915:7:3","typeDescriptions":{}}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5915:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":399,"name":"Lottery_checkUpKeepfalse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5800:24:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5800:152:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":412,"nodeType":"RevertStatement","src":"5793:159:3"}]}},{"expression":{"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":415,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"5973:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":416,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5990:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Lottery.LotteryState)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6003:11:3","memberName":"CALCULATING","nodeType":"MemberAccess","referencedDeclaration":191,"src":"5990:24:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"src":"5973:41:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"id":419,"nodeType":"ExpressionStatement","src":"5973:41:3"},{"assignments":[421],"declarations":[{"constant":false,"id":421,"mutability":"mutable","name":"requestId","nameLocation":"6062:9:3","nodeType":"VariableDeclaration","scope":435,"src":"6054:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":420,"name":"uint256","nodeType":"ElementaryTypeName","src":"6054:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":430,"initialValue":{"arguments":[{"id":424,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"6123:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":425,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6251:16:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":426,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6358:21:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":427,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"6488:18:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":428,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"6601:9:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":422,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"6074:16:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6091:18:3","memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":105,"src":"6074:35:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6074:602:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6054:622:3"},{"eventCall":{"arguments":[{"id":432,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"6714:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":431,"name":"RequestedLotteryWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6691:22:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6691:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":434,"nodeType":"EmitStatement","src":"6686:38:3"}]},"functionSelector":"4585e33b","id":436,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"5612:13:3","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":436,"src":"5626:14:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":387,"name":"bytes","nodeType":"ElementaryTypeName","src":"5626:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5625:32:3"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"5667:0:3"},"scope":586,"src":"5603:1201:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[30],"body":{"id":506,"nodeType":"Block","src":"7058:701:3","statements":[{"assignments":[446],"declarations":[{"constant":false,"id":446,"mutability":"mutable","name":"indexOfWinner","nameLocation":"7076:13:3","nodeType":"VariableDeclaration","scope":506,"src":"7068:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"7068:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":453,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":447,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"7092:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":449,"indexExpression":{"hexValue":"30","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7104:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7092:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":450,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"7109:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7119:6:3","memberName":"length","nodeType":"MemberAccess","src":"7109:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7092:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7068:57:3"},{"assignments":[455],"declarations":[{"constant":false,"id":455,"mutability":"mutable","name":"recentWinner","nameLocation":"7151:12:3","nodeType":"VariableDeclaration","scope":506,"src":"7135:28:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":454,"name":"address","nodeType":"ElementaryTypeName","src":"7135:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":459,"initialValue":{"baseExpression":{"id":456,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"7166:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":458,"indexExpression":{"id":457,"name":"indexOfWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"7176:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7166:24:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"7135:55:3"},{"expression":{"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":460,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"7200:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":461,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"7217:12:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"7200:29:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":463,"nodeType":"ExpressionStatement","src":"7200:29:3"},{"expression":{"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":464,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"7239:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":465,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"7256:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Lottery.LotteryState)"}},"id":466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7269:4:3","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":190,"src":"7256:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"src":"7239:34:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"id":468,"nodeType":"ExpressionStatement","src":"7239:34:3"},{"assignments":[470,null],"declarations":[{"constant":false,"id":470,"mutability":"mutable","name":"success","nameLocation":"7375:7:3","nodeType":"VariableDeclaration","scope":506,"src":"7370:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":469,"name":"bool","nodeType":"ElementaryTypeName","src":"7370:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":481,"initialValue":{"arguments":[{"hexValue":"","id":479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7436:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":471,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"7388:12:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7401:4:3","memberName":"call","nodeType":"MemberAccess","src":"7388:17:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":475,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7421:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Lottery_$586","typeString":"contract Lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lottery_$586","typeString":"contract Lottery"}],"id":474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7413:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":473,"name":"address","nodeType":"ElementaryTypeName","src":"7413:7:3","typeDescriptions":{}}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7413:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7427:7:3","memberName":"balance","nodeType":"MemberAccess","src":"7413:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"7388:47:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7388:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7369:70:3"},{"condition":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7453:8:3","subExpression":{"id":482,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"7454:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":488,"nodeType":"IfStatement","src":"7449:77:3","trueBody":{"id":487,"nodeType":"Block","src":"7463:63:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":484,"name":"Lottery__WinnerTransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"7484:29:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7484:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":486,"nodeType":"RevertStatement","src":"7477:38:3"}]}},{"eventCall":{"arguments":[{"id":490,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"7610:12:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":489,"name":"WinnerPicked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"7597:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7597:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":492,"nodeType":"EmitStatement","src":"7592:31:3"},{"expression":{"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":493,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"7673:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7707:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7685:21:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":494,"name":"address","nodeType":"ElementaryTypeName","src":"7689:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":495,"nodeType":"ArrayTypeName","src":"7689:17:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7685:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"7673:36:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":500,"nodeType":"ExpressionStatement","src":"7673:36:3"},{"expression":{"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":501,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"7719:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":502,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7737:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7743:9:3","memberName":"timestamp","nodeType":"MemberAccess","src":"7737:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7719:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":505,"nodeType":"ExpressionStatement","src":"7719:33:3"}]},"id":507,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6944:18:3","nodeType":"FunctionDefinition","overrides":{"id":443,"nodeType":"OverrideSpecifier","overrides":[],"src":"7049:8:3"},"parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":507,"src":"6972:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":437,"name":"uint256","nodeType":"ElementaryTypeName","src":"6972:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"randomWords","nameLocation":"7022:11:3","nodeType":"VariableDeclaration","scope":507,"src":"7005:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":439,"name":"uint256","nodeType":"ElementaryTypeName","src":"7005:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":440,"nodeType":"ArrayTypeName","src":"7005:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6962:77:3"},"returnParameters":{"id":444,"nodeType":"ParameterList","parameters":[],"src":"7058:0:3"},"scope":586,"src":"6935:824:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"7850:37:3","statements":[{"expression":{"id":512,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"7867:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":511,"id":513,"nodeType":"Return","src":"7860:20:3"}]},"functionSelector":"09bc33a7","id":515,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"7803:14:3","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[],"src":"7817:2:3"},"returnParameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":515,"src":"7841:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"7841:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7840:9:3"},"scope":586,"src":"7794:93:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":526,"nodeType":"Block","src":"7958:40:3","statements":[{"expression":{"baseExpression":{"id":522,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"7975:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":524,"indexExpression":{"id":523,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"7985:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7975:16:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":521,"id":525,"nodeType":"Return","src":"7968:23:3"}]},"functionSelector":"460e2049","id":527,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayers","nameLocation":"7902:10:3","nodeType":"FunctionDefinition","parameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"index","nameLocation":"7921:5:3","nodeType":"VariableDeclaration","scope":527,"src":"7913:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"7913:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7912:15:3"},"returnParameters":{"id":521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":527,"src":"7949:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"7949:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7948:9:3"},"scope":586,"src":"7893:105:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":534,"nodeType":"Block","src":"8061:38:3","statements":[{"expression":{"id":532,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"8078:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":531,"id":533,"nodeType":"Return","src":"8071:21:3"}]},"functionSelector":"473f1ddc","id":535,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"8013:15:3","nodeType":"FunctionDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"8028:2:3"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":535,"src":"8052:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":529,"name":"address","nodeType":"ElementaryTypeName","src":"8052:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8051:9:3"},"scope":586,"src":"8004:95:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":543,"nodeType":"Block","src":"8167:38:3","statements":[{"expression":{"id":541,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"8184:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"functionReturnParameters":540,"id":542,"nodeType":"Return","src":"8177:21:3"}]},"functionSelector":"6b68c03c","id":544,"implemented":true,"kind":"function","modifiers":[],"name":"getLotteryState","nameLocation":"8114:15:3","nodeType":"FunctionDefinition","parameters":{"id":536,"nodeType":"ParameterList","parameters":[],"src":"8129:2:3"},"returnParameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":544,"src":"8153:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"},"typeName":{"id":538,"nodeType":"UserDefinedTypeName","pathNode":{"id":537,"name":"LotteryState","nameLocations":["8153:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":192,"src":"8153:12:3"},"referencedDeclaration":192,"src":"8153:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Lottery.LotteryState"}},"visibility":"internal"}],"src":"8152:14:3"},"scope":586,"src":"8105:100:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":551,"nodeType":"Block","src":"8264:33:3","statements":[{"expression":{"id":549,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"8281:9:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":548,"id":550,"nodeType":"Return","src":"8274:16:3"}]},"functionSelector":"53a2c19a","id":552,"implemented":true,"kind":"function","modifiers":[],"name":"getNumWords","nameLocation":"8220:11:3","nodeType":"FunctionDefinition","parameters":{"id":545,"nodeType":"ParameterList","parameters":[],"src":"8231:2:3"},"returnParameters":{"id":548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":552,"src":"8255:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":546,"name":"uint256","nodeType":"ElementaryTypeName","src":"8255:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8254:9:3"},"scope":586,"src":"8211:86:3","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":560,"nodeType":"Block","src":"8363:40:3","statements":[{"expression":{"expression":{"id":557,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"8380:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8390:6:3","memberName":"length","nodeType":"MemberAccess","src":"8380:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":556,"id":559,"nodeType":"Return","src":"8373:23:3"}]},"functionSelector":"fd6673f5","id":561,"implemented":true,"kind":"function","modifiers":[],"name":"getNumberOfPlayers","nameLocation":"8312:18:3","nodeType":"FunctionDefinition","parameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"8330:2:3"},"returnParameters":{"id":556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":561,"src":"8354:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":554,"name":"uint256","nodeType":"ElementaryTypeName","src":"8354:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8353:9:3"},"scope":586,"src":"8303:100:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":568,"nodeType":"Block","src":"8469:39:3","statements":[{"expression":{"id":566,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"8486:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":565,"id":567,"nodeType":"Return","src":"8479:22:3"}]},"functionSelector":"320229eb","id":569,"implemented":true,"kind":"function","modifiers":[],"name":"getLatestTimeStamp","nameLocation":"8418:18:3","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[],"src":"8436:2:3"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":569,"src":"8460:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":563,"name":"uint256","nodeType":"ElementaryTypeName","src":"8460:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8459:9:3"},"scope":586,"src":"8409:99:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":576,"nodeType":"Block","src":"8579:45:3","statements":[{"expression":{"id":574,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"8596:21:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":573,"id":575,"nodeType":"Return","src":"8589:28:3"}]},"functionSelector":"5f1b0fd8","id":577,"implemented":true,"kind":"function","modifiers":[],"name":"getRequestConfirmations","nameLocation":"8523:23:3","nodeType":"FunctionDefinition","parameters":{"id":570,"nodeType":"ParameterList","parameters":[],"src":"8546:2:3"},"returnParameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":577,"src":"8570:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"8570:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8569:9:3"},"scope":586,"src":"8514:110:3","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":584,"nodeType":"Block","src":"8683:34:3","statements":[{"expression":{"id":582,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"8700:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":581,"id":583,"nodeType":"Return","src":"8693:17:3"}]},"functionSelector":"91ad27b4","id":585,"implemented":true,"kind":"function","modifiers":[],"name":"getInterval","nameLocation":"8639:11:3","nodeType":"FunctionDefinition","parameters":{"id":578,"nodeType":"ParameterList","parameters":[],"src":"8650:2:3"},"returnParameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":585,"src":"8674:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":579,"name":"uint256","nodeType":"ElementaryTypeName","src":"8674:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8673:9:3"},"scope":586,"src":"8630:87:3","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":587,"src":"1427:7292:3","usedErrors":[8,172,174,176,184]}],"src":"32:8688:3"},"id":3}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"KeeperCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":\"KeeperCompatibleInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/lottery.sol":{"Lottery":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"interval","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"Lottery__NotEnoughETHEntered","type":"error"},{"inputs":[],"name":"Lottery__NotOpen","type":"error"},{"inputs":[],"name":"Lottery__WinnerTransferFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentBalance","type":"uint256"},{"internalType":"uint256","name":"numPlayers","type":"uint256"},{"internalType":"uint256","name":"lotteryState","type":"uint256"}],"name":"Lottery_checkUpKeepfalse","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"LotteryEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"RequestedLotteryWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"WinnerPicked","type":"event"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enterLottery","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInterval","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLatestTimeStamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLotteryState","outputs":[{"internalType":"enum Lottery.LotteryState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getNumberOfPlayers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRequestConfirmations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Jatin Kalra","details":"This implements Chainlink VRF V2 & Chainlink Keepers","kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"This is a function that Chainlink Keepers nodes call They look for the `upkeepNeeded` to return true The following should be true in order to return true: i. Our time internal should have passed ii. The lottery should have atleast 1 player, and have some ETH iii. Our subscription is funded with LINK iv. The lottery should be in an \"open\" state."}},"title":"A sample lottery contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_288":{"entryPoint":null,"id":288,"parameterSlots":6,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":383,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":501,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":442,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":635,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":570,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory":{"entryPoint":658,"id":null,"parameterSlots":2,"returnSlots":6},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":337,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":465,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":305,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":406,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":593,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":524,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":814,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":300,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":357,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":475,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":416,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":609,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":544,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3636:4","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:4","statements":[{"nodeType":"YulAssignment","src":"57:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:4"},"nodeType":"YulFunctionCall","src":"67:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:4"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:4","type":""}],"src":"7:75:4"},{"body":{"nodeType":"YulBlock","src":"177:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:4"},"nodeType":"YulFunctionCall","src":"187:12:4"},"nodeType":"YulExpressionStatement","src":"187:12:4"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:4"},{"body":{"nodeType":"YulBlock","src":"300:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:4"},"nodeType":"YulFunctionCall","src":"310:12:4"},"nodeType":"YulExpressionStatement","src":"310:12:4"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:4"},{"body":{"nodeType":"YulBlock","src":"379:81:4","statements":[{"nodeType":"YulAssignment","src":"389:65:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:4","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:4"},"nodeType":"YulFunctionCall","src":"400:54:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:4"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:4","type":""}],"src":"334:126:4"},{"body":{"nodeType":"YulBlock","src":"511:51:4","statements":[{"nodeType":"YulAssignment","src":"521:35:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:4"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:4"},"nodeType":"YulFunctionCall","src":"532:24:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:4"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:4","type":""}],"src":"466:96:4"},{"body":{"nodeType":"YulBlock","src":"611:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:4"},"nodeType":"YulFunctionCall","src":"670:12:4"},"nodeType":"YulExpressionStatement","src":"670:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:4"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:4"},"nodeType":"YulFunctionCall","src":"641:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:4"},"nodeType":"YulFunctionCall","src":"631:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:4"},"nodeType":"YulFunctionCall","src":"624:43:4"},"nodeType":"YulIf","src":"621:63:4"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:4","type":""}],"src":"568:122:4"},{"body":{"nodeType":"YulBlock","src":"759:80:4","statements":[{"nodeType":"YulAssignment","src":"769:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:4"},"nodeType":"YulFunctionCall","src":"778:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:4"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:4"},"nodeType":"YulFunctionCall","src":"800:33:4"},"nodeType":"YulExpressionStatement","src":"800:33:4"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:4","type":""}],"src":"696:143:4"},{"body":{"nodeType":"YulBlock","src":"890:32:4","statements":[{"nodeType":"YulAssignment","src":"900:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"911:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"900:7:4"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"872:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"882:7:4","type":""}],"src":"845:77:4"},{"body":{"nodeType":"YulBlock","src":"971:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:4"},"nodeType":"YulFunctionCall","src":"1030:12:4"},"nodeType":"YulExpressionStatement","src":"1030:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1001:17:4"},"nodeType":"YulFunctionCall","src":"1001:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:4"},"nodeType":"YulFunctionCall","src":"991:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:4"},"nodeType":"YulFunctionCall","src":"984:43:4"},"nodeType":"YulIf","src":"981:63:4"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:4","type":""}],"src":"928:122:4"},{"body":{"nodeType":"YulBlock","src":"1119:80:4","statements":[{"nodeType":"YulAssignment","src":"1129:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:4"},"nodeType":"YulFunctionCall","src":"1138:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1160:26:4"},"nodeType":"YulFunctionCall","src":"1160:33:4"},"nodeType":"YulExpressionStatement","src":"1160:33:4"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:4","type":""}],"src":"1056:143:4"},{"body":{"nodeType":"YulBlock","src":"1250:32:4","statements":[{"nodeType":"YulAssignment","src":"1260:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"1271:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1260:7:4"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1232:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1242:7:4","type":""}],"src":"1205:77:4"},{"body":{"nodeType":"YulBlock","src":"1331:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"1388:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1397:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1400:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1390:6:4"},"nodeType":"YulFunctionCall","src":"1390:12:4"},"nodeType":"YulExpressionStatement","src":"1390:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1354:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1379:5:4"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1361:17:4"},"nodeType":"YulFunctionCall","src":"1361:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1351:2:4"},"nodeType":"YulFunctionCall","src":"1351:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1344:6:4"},"nodeType":"YulFunctionCall","src":"1344:43:4"},"nodeType":"YulIf","src":"1341:63:4"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1324:5:4","type":""}],"src":"1288:122:4"},{"body":{"nodeType":"YulBlock","src":"1479:80:4","statements":[{"nodeType":"YulAssignment","src":"1489:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1504:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:4"},"nodeType":"YulFunctionCall","src":"1498:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1489:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1547:5:4"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1520:26:4"},"nodeType":"YulFunctionCall","src":"1520:33:4"},"nodeType":"YulExpressionStatement","src":"1520:33:4"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1457:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"1465:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1473:5:4","type":""}],"src":"1416:143:4"},{"body":{"nodeType":"YulBlock","src":"1609:57:4","statements":[{"nodeType":"YulAssignment","src":"1619:41:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1634:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"1641:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1630:3:4"},"nodeType":"YulFunctionCall","src":"1630:30:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1619:7:4"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1591:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1601:7:4","type":""}],"src":"1565:101:4"},{"body":{"nodeType":"YulBlock","src":"1714:78:4","statements":[{"body":{"nodeType":"YulBlock","src":"1770:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1779:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1782:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1772:6:4"},"nodeType":"YulFunctionCall","src":"1772:12:4"},"nodeType":"YulExpressionStatement","src":"1772:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1737:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1761:5:4"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"1744:16:4"},"nodeType":"YulFunctionCall","src":"1744:23:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1734:2:4"},"nodeType":"YulFunctionCall","src":"1734:34:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1727:6:4"},"nodeType":"YulFunctionCall","src":"1727:42:4"},"nodeType":"YulIf","src":"1724:62:4"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1707:5:4","type":""}],"src":"1672:120:4"},{"body":{"nodeType":"YulBlock","src":"1860:79:4","statements":[{"nodeType":"YulAssignment","src":"1870:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1885:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1879:5:4"},"nodeType":"YulFunctionCall","src":"1879:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1870:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1927:5:4"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"1901:25:4"},"nodeType":"YulFunctionCall","src":"1901:32:4"},"nodeType":"YulExpressionStatement","src":"1901:32:4"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1838:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"1846:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1854:5:4","type":""}],"src":"1798:141:4"},{"body":{"nodeType":"YulBlock","src":"1989:49:4","statements":[{"nodeType":"YulAssignment","src":"1999:33:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2014:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2021:10:4","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2010:3:4"},"nodeType":"YulFunctionCall","src":"2010:22:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1999:7:4"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1971:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1981:7:4","type":""}],"src":"1945:93:4"},{"body":{"nodeType":"YulBlock","src":"2086:78:4","statements":[{"body":{"nodeType":"YulBlock","src":"2142:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2151:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2154:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2144:6:4"},"nodeType":"YulFunctionCall","src":"2144:12:4"},"nodeType":"YulExpressionStatement","src":"2144:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2109:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2133:5:4"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"2116:16:4"},"nodeType":"YulFunctionCall","src":"2116:23:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2106:2:4"},"nodeType":"YulFunctionCall","src":"2106:34:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2099:6:4"},"nodeType":"YulFunctionCall","src":"2099:42:4"},"nodeType":"YulIf","src":"2096:62:4"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2079:5:4","type":""}],"src":"2044:120:4"},{"body":{"nodeType":"YulBlock","src":"2232:79:4","statements":[{"nodeType":"YulAssignment","src":"2242:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2257:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2251:5:4"},"nodeType":"YulFunctionCall","src":"2251:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2242:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2299:5:4"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"2273:25:4"},"nodeType":"YulFunctionCall","src":"2273:32:4"},"nodeType":"YulExpressionStatement","src":"2273:32:4"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2210:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"2218:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2226:5:4","type":""}],"src":"2170:141:4"},{"body":{"nodeType":"YulBlock","src":"2477:970:4","statements":[{"body":{"nodeType":"YulBlock","src":"2524:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2526:77:4"},"nodeType":"YulFunctionCall","src":"2526:79:4"},"nodeType":"YulExpressionStatement","src":"2526:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2498:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"2507:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2494:3:4"},"nodeType":"YulFunctionCall","src":"2494:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"2519:3:4","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2490:3:4"},"nodeType":"YulFunctionCall","src":"2490:33:4"},"nodeType":"YulIf","src":"2487:120:4"},{"nodeType":"YulBlock","src":"2617:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2632:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2646:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2636:6:4","type":""}]},{"nodeType":"YulAssignment","src":"2661:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2707:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2718:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2703:3:4"},"nodeType":"YulFunctionCall","src":"2703:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2727:7:4"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2671:31:4"},"nodeType":"YulFunctionCall","src":"2671:64:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2661:6:4"}]}]},{"nodeType":"YulBlock","src":"2755:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2770:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2784:2:4","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2774:6:4","type":""}]},{"nodeType":"YulAssignment","src":"2800:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2846:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2857:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2842:3:4"},"nodeType":"YulFunctionCall","src":"2842:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2866:7:4"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2810:31:4"},"nodeType":"YulFunctionCall","src":"2810:64:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2800:6:4"}]}]},{"nodeType":"YulBlock","src":"2894:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2909:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2923:2:4","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2913:6:4","type":""}]},{"nodeType":"YulAssignment","src":"2939:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2985:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2996:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2981:3:4"},"nodeType":"YulFunctionCall","src":"2981:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3005:7:4"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"2949:31:4"},"nodeType":"YulFunctionCall","src":"2949:64:4"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2939:6:4"}]}]},{"nodeType":"YulBlock","src":"3033:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3048:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"3062:2:4","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3052:6:4","type":""}]},{"nodeType":"YulAssignment","src":"3078:73:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3123:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"3134:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3119:3:4"},"nodeType":"YulFunctionCall","src":"3119:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3143:7:4"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"3088:30:4"},"nodeType":"YulFunctionCall","src":"3088:63:4"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3078:6:4"}]}]},{"nodeType":"YulBlock","src":"3171:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3186:17:4","value":{"kind":"number","nodeType":"YulLiteral","src":"3200:3:4","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3190:6:4","type":""}]},{"nodeType":"YulAssignment","src":"3217:73:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3262:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"3273:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3258:3:4"},"nodeType":"YulFunctionCall","src":"3258:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3282:7:4"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"3227:30:4"},"nodeType":"YulFunctionCall","src":"3227:63:4"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3217:6:4"}]}]},{"nodeType":"YulBlock","src":"3310:130:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3325:17:4","value":{"kind":"number","nodeType":"YulLiteral","src":"3339:3:4","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3329:6:4","type":""}]},{"nodeType":"YulAssignment","src":"3356:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3402:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"3413:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3398:3:4"},"nodeType":"YulFunctionCall","src":"3398:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3422:7:4"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"3366:31:4"},"nodeType":"YulFunctionCall","src":"3366:64:4"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"3356:6:4"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2407:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2418:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2430:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2438:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2446:6:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2454:6:4","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2462:6:4","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2470:6:4","type":""}],"src":"2317:1130:4"},{"body":{"nodeType":"YulBlock","src":"3481:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3498:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3501:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3491:6:4"},"nodeType":"YulFunctionCall","src":"3491:88:4"},"nodeType":"YulExpressionStatement","src":"3491:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3595:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3598:4:4","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3588:6:4"},"nodeType":"YulFunctionCall","src":"3588:15:4"},"nodeType":"YulExpressionStatement","src":"3588:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3619:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3622:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3612:6:4"},"nodeType":"YulFunctionCall","src":"3612:15:4"},"nodeType":"YulExpressionStatement","src":"3612:15:4"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"3453:180:4"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n}\n","id":4,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b50604051620017b2380380620017b2833981810160405281019062000038919062000292565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c6200032e565b5b021790555042600281905550806003819055505050505050506200035d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015e8262000131565b9050919050565b620001708162000151565b81146200017c57600080fd5b50565b600081519050620001908162000165565b92915050565b6000819050919050565b620001ab8162000196565b8114620001b757600080fd5b50565b600081519050620001cb81620001a0565b92915050565b6000819050919050565b620001e681620001d1565b8114620001f257600080fd5b50565b6000815190506200020681620001db565b92915050565b600067ffffffffffffffff82169050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600063ffffffff82169050919050565b6200026c8162000251565b81146200027857600080fd5b50565b6000815190506200028c8162000261565b92915050565b60008060008060008060c08789031215620002b257620002b16200012c565b5b6000620002c289828a016200017f565b9650506020620002d589828a01620001ba565b9550506040620002e889828a01620001f5565b9450506060620002fb89828a016200023a565b93505060806200030e89828a016200027b565b92505060a06200032189828a01620001ba565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516113f7620003bb600039600061051f015260006104fc015260006104db0152600061049f0152600081816102fa0152610717015260008181610320015261037401526113f76000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636e04ff0d116100595780636e04ff0d1461025857806391ad27b414610296578063c1af5785146102c1578063fd6673f5146102cb576100c2565b806353a2c19a146101d75780635f1b0fd8146102025780636b68c03c1461022d576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063460e20491461016f578063473f1ddc146101ac575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610b81565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d35565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610b81565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610dec565b6103e8565b005b34801561017b57600080fd5b5061019660048036038101906101919190610e39565b6105d8565b6040516101a39190610ea7565b60405180910390f35b3480156101b857600080fd5b506101c161061f565b6040516101ce9190610ea7565b60405180910390f35b3480156101e357600080fd5b506101ec610649565b6040516101f99190610b81565b60405180910390f35b34801561020e57600080fd5b50610217610658565b6040516102249190610b81565b60405180910390f35b34801561023957600080fd5b50610242610665565b60405161024f9190610f39565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a9190611009565b61067c565b60405161028d9291906110ec565b60405180910390f35b3480156102a257600080fd5b506102ab61070b565b6040516102b89190610b81565b60405180910390f35b6102c9610715565b005b3480156102d757600080fd5b506102e0610884565b6040516102ed9190610b81565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061111c565b60405180910390fd5b6103da8282610890565b5050565b6000600254905090565b60006104026040518060200160405280600081525061067c565b509050806104715747600080549050600160149054906101000a900460ff16600181111561043357610432610ec2565b5b6040517f3c96b78a00000000000000000000000000000000000000000000000000000000815260040161046893929190611145565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561049657610495610ec2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105609594939291906111f4565b6020604051808303816000875af115801561057f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a3919061125c565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b60008082815481106105ed576105ec611289565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106a4576106a3610ec2565b5b600060018111156106b8576106b7610ec2565b5b1490506000600354600254426106ce91906112e7565b119050600080600080549050119050600080471190508380156106ee5750825b80156106f75750815b80156107005750805b955050505050915091565b6000600354905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561076f576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561078357610782610ec2565b5b600160149054906101000a900460ff1660018111156107a5576107a4610ec2565b5b146107dc576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008080549050905090565b60008080549050826000815181106108ab576108aa611289565b5b60200260200101516108bd919061134a565b905060008082815481106108d4576108d3611289565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561096857610967610ec2565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610993906113ac565b60006040518083038185875af1925050503d80600081146109d0576040519150601f19603f3d011682016040523d82523d6000602084013e6109d5565b606091505b5050905080610a10576040517f061104de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610a6e57610a6d610bf2565b5b604051908082528060200260200182016040528015610a9c5781602001602082028036833780820191505090505b5060009080519060200190610ab2929190610ac1565b50426002819055505050505050565b828054828255906000526020600020908101928215610b3a579160200282015b82811115610b395782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ae1565b5b509050610b479190610b4b565b5090565b5b80821115610b64576000816000905550600101610b4c565b5090565b6000819050919050565b610b7b81610b68565b82525050565b6000602082019050610b966000830184610b72565b92915050565b6000604051905090565b600080fd5b600080fd5b610bb981610b68565b8114610bc457600080fd5b50565b600081359050610bd681610bb0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c2a82610be1565b810181811067ffffffffffffffff82111715610c4957610c48610bf2565b5b80604052505050565b6000610c5c610b9c565b9050610c688282610c21565b919050565b600067ffffffffffffffff821115610c8857610c87610bf2565b5b602082029050602081019050919050565b600080fd5b6000610cb1610cac84610c6d565b610c52565b90508083825260208201905060208402830185811115610cd457610cd3610c99565b5b835b81811015610cfd5780610ce98882610bc7565b845260208401935050602081019050610cd6565b5050509392505050565b600082601f830112610d1c57610d1b610bdc565b5b8135610d2c848260208601610c9e565b91505092915050565b60008060408385031215610d4c57610d4b610ba6565b5b6000610d5a85828601610bc7565b925050602083013567ffffffffffffffff811115610d7b57610d7a610bab565b5b610d8785828601610d07565b9150509250929050565b600080fd5b60008083601f840112610dac57610dab610bdc565b5b8235905067ffffffffffffffff811115610dc957610dc8610d91565b5b602083019150836001820283011115610de557610de4610c99565b5b9250929050565b60008060208385031215610e0357610e02610ba6565b5b600083013567ffffffffffffffff811115610e2157610e20610bab565b5b610e2d85828601610d96565b92509250509250929050565b600060208284031215610e4f57610e4e610ba6565b5b6000610e5d84828501610bc7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9182610e66565b9050919050565b610ea181610e86565b82525050565b6000602082019050610ebc6000830184610e98565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f0257610f01610ec2565b5b50565b6000819050610f1382610ef1565b919050565b6000610f2382610f05565b9050919050565b610f3381610f18565b82525050565b6000602082019050610f4e6000830184610f2a565b92915050565b600080fd5b600067ffffffffffffffff821115610f7457610f73610bf2565b5b610f7d82610be1565b9050602081019050919050565b82818337600083830152505050565b6000610fac610fa784610f59565b610c52565b905082815260208101848484011115610fc857610fc7610f54565b5b610fd3848285610f8a565b509392505050565b600082601f830112610ff057610fef610bdc565b5b8135611000848260208601610f99565b91505092915050565b60006020828403121561101f5761101e610ba6565b5b600082013567ffffffffffffffff81111561103d5761103c610bab565b5b61104984828501610fdb565b91505092915050565b60008115159050919050565b61106781611052565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110a757808201518184015260208101905061108c565b60008484015250505050565b60006110be8261106d565b6110c88185611078565b93506110d8818560208601611089565b6110e181610be1565b840191505092915050565b6000604082019050611101600083018561105e565b818103602083015261111381846110b3565b90509392505050565b60006040820190506111316000830185610e98565b61113e6020830184610e98565b9392505050565b600060608201905061115a6000830186610b72565b6111676020830185610b72565b6111746040830184610b72565b949350505050565b6000819050919050565b61118f8161117c565b82525050565b600067ffffffffffffffff82169050919050565b6111b281611195565b82525050565b600061ffff82169050919050565b6111cf816111b8565b82525050565b600063ffffffff82169050919050565b6111ee816111d5565b82525050565b600060a0820190506112096000830188611186565b61121660208301876111a9565b61122360408301866111c6565b61123060608301856111e5565b61123d60808301846111e5565b9695505050505050565b60008151905061125681610bb0565b92915050565b60006020828403121561127257611271610ba6565b5b600061128084828501611247565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112f282610b68565b91506112fd83610b68565b9250828203905081811115611315576113146112b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061135582610b68565b915061136083610b68565b9250826113705761136f61131b565b5b828206905092915050565b600081905092915050565b50565b600061139660008361137b565b91506113a182611386565b600082019050919050565b60006113b782611389565b915081905091905056fea26469706673582212204199346f731001178c7e43b0a05a40c69a039070c3b4c4661f541b396a8283f464736f6c63430008120033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x17B2 CODESIZE SUB DUP1 PUSH3 0x17B2 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x292 JUMP JUMPDEST DUP6 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP DUP5 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP4 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x100 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x120 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x10D JUMPI PUSH3 0x10C PUSH3 0x32E JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP PUSH3 0x35D JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15E DUP3 PUSH3 0x131 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x170 DUP2 PUSH3 0x151 JUMP JUMPDEST DUP2 EQ PUSH3 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x190 DUP2 PUSH3 0x165 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AB DUP2 PUSH3 0x196 JUMP JUMPDEST DUP2 EQ PUSH3 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1CB DUP2 PUSH3 0x1A0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1E6 DUP2 PUSH3 0x1D1 JUMP JUMPDEST DUP2 EQ PUSH3 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x206 DUP2 PUSH3 0x1DB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x22B DUP2 PUSH3 0x20C JUMP JUMPDEST DUP2 EQ PUSH3 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x24B DUP2 PUSH3 0x220 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x26C DUP2 PUSH3 0x251 JUMP JUMPDEST DUP2 EQ PUSH3 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x28C DUP2 PUSH3 0x261 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x2B2 JUMPI PUSH3 0x2B1 PUSH3 0x12C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x2C2 DUP10 DUP3 DUP11 ADD PUSH3 0x17F JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x2D5 DUP10 DUP3 DUP11 ADD PUSH3 0x1BA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x2E8 DUP10 DUP3 DUP11 ADD PUSH3 0x1F5 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x2FB DUP10 DUP3 DUP11 ADD PUSH3 0x23A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH3 0x30E DUP10 DUP3 DUP11 ADD PUSH3 0x27B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x321 DUP10 DUP3 DUP11 ADD PUSH3 0x1BA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x13F7 PUSH3 0x3BB PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x51F ADD MSTORE PUSH1 0x0 PUSH2 0x4FC ADD MSTORE PUSH1 0x0 PUSH2 0x4DB ADD MSTORE PUSH1 0x0 PUSH2 0x49F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2FA ADD MSTORE PUSH2 0x717 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x320 ADD MSTORE PUSH2 0x374 ADD MSTORE PUSH2 0x13F7 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x53A2C19A GT PUSH2 0x7F JUMPI DUP1 PUSH4 0x6E04FF0D GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x2CB JUMPI PUSH2 0xC2 JUMP JUMPDEST DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x5F1B0FD8 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x6B68C03C EQ PUSH2 0x22D JUMPI PUSH2 0xC2 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x320229EB EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x460E2049 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x1AC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x114 SWAP2 SWAP1 PUSH2 0xD35 JUMP JUMPDEST PUSH2 0x31E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13D SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0xDEC JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x191 SWAP2 SWAP1 PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x5D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xEA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C1 PUSH2 0x61F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0xEA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x658 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x224 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24F SWAP2 SWAP1 PUSH2 0xF39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x1009 JUMP JUMPDEST PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28D SWAP3 SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AB PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B8 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C9 PUSH2 0x715 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E0 PUSH2 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D0 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP3 SWAP2 SWAP1 PUSH2 0x111C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3DA DUP3 DUP3 PUSH2 0x890 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x402 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x67C JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x471 JUMPI SELFBALANCE PUSH1 0x0 DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x433 JUMPI PUSH2 0x432 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3C96B78A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x468 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x496 JUMPI PUSH2 0x495 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x560 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x57F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5A3 SWAP2 SWAP1 PUSH2 0x125C JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xEBF56642252004C18A776F30D528E7A0CE8C5DB14B6596FB6550F630C8A24C6C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x5ED JUMPI PUSH2 0x5EC PUSH2 0x1289 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A3 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B7 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x6CE SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x6EE JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x6F7 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x700 JUMPI POP DUP1 JUMPDEST SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x76F JUMPI PUSH1 0x40 MLOAD PUSH32 0xEC269FD100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x783 JUMPI PUSH2 0x782 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7A5 JUMPI PUSH2 0x7A4 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0xE76BE6FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D64FB5BA9F2548C5B98468D58F25B87B9E866AFEE0122E92D9FE722BF85076C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8AB JUMPI PUSH2 0x8AA PUSH2 0x1289 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8BD SWAP2 SWAP1 PUSH2 0x134A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8D4 JUMPI PUSH2 0x8D3 PUSH2 0x1289 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x968 JUMPI PUSH2 0x967 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x993 SWAP1 PUSH2 0x13AC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x61104DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5B690EC4A06FE979403046EAEEA5B3CE38524683C3001F662C8B5A829632F7DF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA6E JUMPI PUSH2 0xA6D PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA9C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xAB2 SWAP3 SWAP2 SWAP1 PUSH2 0xAC1 JUMP JUMPDEST POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xB3A JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xB39 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xAE1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB47 SWAP2 SWAP1 PUSH2 0xB4B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB64 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB4C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB7B DUP2 PUSH2 0xB68 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB96 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB72 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB9 DUP2 PUSH2 0xB68 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD6 DUP2 PUSH2 0xBB0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xC2A DUP3 PUSH2 0xBE1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xC49 JUMPI PUSH2 0xC48 PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC5C PUSH2 0xB9C JUMP JUMPDEST SWAP1 POP PUSH2 0xC68 DUP3 DUP3 PUSH2 0xC21 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC88 JUMPI PUSH2 0xC87 PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCB1 PUSH2 0xCAC DUP5 PUSH2 0xC6D JUMP JUMPDEST PUSH2 0xC52 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xCD4 JUMPI PUSH2 0xCD3 PUSH2 0xC99 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCFD JUMPI DUP1 PUSH2 0xCE9 DUP9 DUP3 PUSH2 0xBC7 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCD6 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD1C JUMPI PUSH2 0xD1B PUSH2 0xBDC JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD2C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xC9E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4C JUMPI PUSH2 0xD4B PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD5A DUP6 DUP3 DUP7 ADD PUSH2 0xBC7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD7B JUMPI PUSH2 0xD7A PUSH2 0xBAB JUMP JUMPDEST JUMPDEST PUSH2 0xD87 DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xDAC JUMPI PUSH2 0xDAB PUSH2 0xBDC JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDC9 JUMPI PUSH2 0xDC8 PUSH2 0xD91 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xDE5 JUMPI PUSH2 0xDE4 PUSH2 0xC99 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE03 JUMPI PUSH2 0xE02 PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE21 JUMPI PUSH2 0xE20 PUSH2 0xBAB JUMP JUMPDEST JUMPDEST PUSH2 0xE2D DUP6 DUP3 DUP7 ADD PUSH2 0xD96 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE4F JUMPI PUSH2 0xE4E PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE5D DUP5 DUP3 DUP6 ADD PUSH2 0xBC7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE91 DUP3 PUSH2 0xE66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEA1 DUP2 PUSH2 0xE86 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEBC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE98 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xF02 JUMPI PUSH2 0xF01 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0xF13 DUP3 PUSH2 0xEF1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF23 DUP3 PUSH2 0xF05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF33 DUP2 PUSH2 0xF18 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF4E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST PUSH2 0xF7D DUP3 PUSH2 0xBE1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFAC PUSH2 0xFA7 DUP5 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xC52 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xFC8 JUMPI PUSH2 0xFC7 PUSH2 0xF54 JUMP JUMPDEST JUMPDEST PUSH2 0xFD3 DUP5 DUP3 DUP6 PUSH2 0xF8A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFF0 JUMPI PUSH2 0xFEF PUSH2 0xBDC JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1000 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101F JUMPI PUSH2 0x101E PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x103D JUMPI PUSH2 0x103C PUSH2 0xBAB JUMP JUMPDEST JUMPDEST PUSH2 0x1049 DUP5 DUP3 DUP6 ADD PUSH2 0xFDB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1067 DUP2 PUSH2 0x1052 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10A7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x108C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BE DUP3 PUSH2 0x106D JUMP JUMPDEST PUSH2 0x10C8 DUP2 DUP6 PUSH2 0x1078 JUMP JUMPDEST SWAP4 POP PUSH2 0x10D8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1089 JUMP JUMPDEST PUSH2 0x10E1 DUP2 PUSH2 0xBE1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1101 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x105E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1113 DUP2 DUP5 PUSH2 0x10B3 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1131 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xE98 JUMP JUMPDEST PUSH2 0x113E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE98 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x115A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x1167 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x1174 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xB72 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x118F DUP2 PUSH2 0x117C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11B2 DUP2 PUSH2 0x1195 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11CF DUP2 PUSH2 0x11B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11EE DUP2 PUSH2 0x11D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1209 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x1186 JUMP JUMPDEST PUSH2 0x1216 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x11A9 JUMP JUMPDEST PUSH2 0x1223 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x11C6 JUMP JUMPDEST PUSH2 0x1230 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x11E5 JUMP JUMPDEST PUSH2 0x123D PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x11E5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1256 DUP2 PUSH2 0xBB0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1272 JUMPI PUSH2 0x1271 PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1280 DUP5 DUP3 DUP6 ADD PUSH2 0x1247 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12F2 DUP3 PUSH2 0xB68 JUMP JUMPDEST SWAP2 POP PUSH2 0x12FD DUP4 PUSH2 0xB68 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1315 JUMPI PUSH2 0x1314 PUSH2 0x12B8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1355 DUP3 PUSH2 0xB68 JUMP JUMPDEST SWAP2 POP PUSH2 0x1360 DUP4 PUSH2 0xB68 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1370 JUMPI PUSH2 0x136F PUSH2 0x131B JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1396 PUSH1 0x0 DUP4 PUSH2 0x137B JUMP JUMPDEST SWAP2 POP PUSH2 0x13A1 DUP3 PUSH2 0x1386 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B7 DUP3 PUSH2 0x1389 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE SWAP10 CALLVALUE PUSH16 0x731001178C7E43B0A05A40C69A039070 0xC3 0xB4 0xC4 PUSH7 0x1F541B396A8283 DELEGATECALL PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"1427:7292:3:-:0;;;2822:622;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3073:16;5616:15:0;5599:32;;;;;;;;;;5556:80;3117:11:3::1;3101:27;;;;::::0;::::1;3183:16;3138:62;;;;;;;;::::0;::::1;3222:7;3210:19;;;;::::0;::::1;3258:14;3239:33;;;;;;;;::::0;::::1;3303:16;3282:37;;;;;;;;::::0;::::1;3346:17;3329:14;;:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;3391:15;3373;:33;;;;3429:8;3416:10;:21;;;;2822:622:::0;;;;;;1427:7292;;88:117:4;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:77::-;1242:7;1271:5;1260:16;;1205:77;;;:::o;1288:122::-;1361:24;1379:5;1361:24;:::i;:::-;1354:5;1351:35;1341:63;;1400:1;1397;1390:12;1341:63;1288:122;:::o;1416:143::-;1473:5;1504:6;1498:13;1489:22;;1520:33;1547:5;1520:33;:::i;:::-;1416:143;;;;:::o;1565:101::-;1601:7;1641:18;1634:5;1630:30;1619:41;;1565:101;;;:::o;1672:120::-;1744:23;1761:5;1744:23;:::i;:::-;1737:5;1734:34;1724:62;;1782:1;1779;1772:12;1724:62;1672:120;:::o;1798:141::-;1854:5;1885:6;1879:13;1870:22;;1901:32;1927:5;1901:32;:::i;:::-;1798:141;;;;:::o;1945:93::-;1981:7;2021:10;2014:5;2010:22;1999:33;;1945:93;;;:::o;2044:120::-;2116:23;2133:5;2116:23;:::i;:::-;2109:5;2106:34;2096:62;;2154:1;2151;2144:12;2096:62;2044:120;:::o;2170:141::-;2226:5;2257:6;2251:13;2242:22;;2273:32;2299:5;2273:32;:::i;:::-;2170:141;;;;:::o;2317:1130::-;2430:6;2438;2446;2454;2462;2470;2519:3;2507:9;2498:7;2494:23;2490:33;2487:120;;;2526:79;;:::i;:::-;2487:120;2646:1;2671:64;2727:7;2718:6;2707:9;2703:22;2671:64;:::i;:::-;2661:74;;2617:128;2784:2;2810:64;2866:7;2857:6;2846:9;2842:22;2810:64;:::i;:::-;2800:74;;2755:129;2923:2;2949:64;3005:7;2996:6;2985:9;2981:22;2949:64;:::i;:::-;2939:74;;2894:129;3062:2;3088:63;3143:7;3134:6;3123:9;3119:22;3088:63;:::i;:::-;3078:73;;3033:128;3200:3;3227:63;3282:7;3273:6;3262:9;3258:22;3227:63;:::i;:::-;3217:73;;3171:129;3339:3;3366:64;3422:7;3413:6;3402:9;3398:22;3366:64;:::i;:::-;3356:74;;3310:130;2317:1130;;;;;;;;:::o;3453:180::-;3501:77;3498:1;3491:88;3598:4;3595:1;3588:15;3622:4;3619:1;3612:15;1427:7292:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@checkUpkeep_386":{"entryPoint":1660,"id":386,"parameterSlots":1,"returnSlots":2},"@enterLottery_325":{"entryPoint":1813,"id":325,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_507":{"entryPoint":2192,"id":507,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_515":{"entryPoint":758,"id":515,"parameterSlots":0,"returnSlots":1},"@getInterval_585":{"entryPoint":1803,"id":585,"parameterSlots":0,"returnSlots":1},"@getLatestTimeStamp_569":{"entryPoint":990,"id":569,"parameterSlots":0,"returnSlots":1},"@getLotteryState_544":{"entryPoint":1637,"id":544,"parameterSlots":0,"returnSlots":1},"@getNumWords_552":{"entryPoint":1609,"id":552,"parameterSlots":0,"returnSlots":1},"@getNumberOfPlayers_561":{"entryPoint":2180,"id":561,"parameterSlots":0,"returnSlots":1},"@getPlayers_527":{"entryPoint":1496,"id":527,"parameterSlots":1,"returnSlots":1},"@getRecentWinner_535":{"entryPoint":1567,"id":535,"parameterSlots":0,"returnSlots":1},"@getRequestConfirmations_577":{"entryPoint":1624,"id":577,"parameterSlots":0,"returnSlots":1},"@performUpkeep_436":{"entryPoint":1000,"id":436,"parameterSlots":2,"returnSlots":0},"@rawFulfillRandomWords_56":{"entryPoint":798,"id":56,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3230,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":3993,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3335,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":3478,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bytes_memory_ptr":{"entryPoint":4059,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":3015,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":4679,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":3564,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":4105,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3641,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":4700,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3381,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":3736,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":4190,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":4486,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":4275,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_LotteryState_$192_to_t_uint8_fromStack":{"entryPoint":3882,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":5001,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":4550,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2930,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":4581,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":4521,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5036,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":3751,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":4380,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4332,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":4596,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_LotteryState_$192__to_t_uint8__fromStack_reversed":{"entryPoint":3897,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2945,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":4421,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":3154,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2972,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3181,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":3929,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":4205,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":4216,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4987,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4839,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3718,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4178,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":4476,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_LotteryState_$192":{"entryPoint":3845,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":4536,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3686,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2920,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":4565,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":4501,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_LotteryState_$192_to_t_uint8":{"entryPoint":3864,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":3978,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":4233,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":3105,"id":null,"parameterSlots":2,"returnSlots":0},"mod_t_uint256":{"entryPoint":4938,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4792,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":4891,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":3778,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4745,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3058,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":3473,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":3036,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":3225,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":3924,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2987,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2982,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":3041,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":4998,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_LotteryState_$192":{"entryPoint":3825,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2992,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15553:4","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:4","statements":[{"nodeType":"YulAssignment","src":"62:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:4"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:4","type":""}],"src":"7:77:4"},{"body":{"nodeType":"YulBlock","src":"155:53:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"172:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"195:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"177:17:4"},"nodeType":"YulFunctionCall","src":"177:24:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"165:6:4"},"nodeType":"YulFunctionCall","src":"165:37:4"},"nodeType":"YulExpressionStatement","src":"165:37:4"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"143:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"150:3:4","type":""}],"src":"90:118:4"},{"body":{"nodeType":"YulBlock","src":"312:124:4","statements":[{"nodeType":"YulAssignment","src":"322:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"334:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"345:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"330:3:4"},"nodeType":"YulFunctionCall","src":"330:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"322:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"402:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"415:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"426:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"411:3:4"},"nodeType":"YulFunctionCall","src":"411:17:4"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"358:43:4"},"nodeType":"YulFunctionCall","src":"358:71:4"},"nodeType":"YulExpressionStatement","src":"358:71:4"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"284:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"296:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"307:4:4","type":""}],"src":"214:222:4"},{"body":{"nodeType":"YulBlock","src":"482:35:4","statements":[{"nodeType":"YulAssignment","src":"492:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"508:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"502:5:4"},"nodeType":"YulFunctionCall","src":"502:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"492:6:4"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"475:6:4","type":""}],"src":"442:75:4"},{"body":{"nodeType":"YulBlock","src":"612:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"629:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"632:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"622:6:4"},"nodeType":"YulFunctionCall","src":"622:12:4"},"nodeType":"YulExpressionStatement","src":"622:12:4"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"523:117:4"},{"body":{"nodeType":"YulBlock","src":"735:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"752:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"755:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"745:6:4"},"nodeType":"YulFunctionCall","src":"745:12:4"},"nodeType":"YulExpressionStatement","src":"745:12:4"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"646:117:4"},{"body":{"nodeType":"YulBlock","src":"812:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"869:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"878:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"881:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"871:6:4"},"nodeType":"YulFunctionCall","src":"871:12:4"},"nodeType":"YulExpressionStatement","src":"871:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"835:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"860:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"842:17:4"},"nodeType":"YulFunctionCall","src":"842:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"832:2:4"},"nodeType":"YulFunctionCall","src":"832:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"825:6:4"},"nodeType":"YulFunctionCall","src":"825:43:4"},"nodeType":"YulIf","src":"822:63:4"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"805:5:4","type":""}],"src":"769:122:4"},{"body":{"nodeType":"YulBlock","src":"949:87:4","statements":[{"nodeType":"YulAssignment","src":"959:29:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"981:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"968:12:4"},"nodeType":"YulFunctionCall","src":"968:20:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"959:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1024:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"997:26:4"},"nodeType":"YulFunctionCall","src":"997:33:4"},"nodeType":"YulExpressionStatement","src":"997:33:4"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"927:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"935:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"943:5:4","type":""}],"src":"897:139:4"},{"body":{"nodeType":"YulBlock","src":"1131:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1148:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1151:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1141:6:4"},"nodeType":"YulFunctionCall","src":"1141:12:4"},"nodeType":"YulExpressionStatement","src":"1141:12:4"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1042:117:4"},{"body":{"nodeType":"YulBlock","src":"1213:54:4","statements":[{"nodeType":"YulAssignment","src":"1223:38:4","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1241:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"1248:2:4","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1237:3:4"},"nodeType":"YulFunctionCall","src":"1237:14:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1257:2:4","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1253:3:4"},"nodeType":"YulFunctionCall","src":"1253:7:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1233:3:4"},"nodeType":"YulFunctionCall","src":"1233:28:4"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1223:6:4"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1196:5:4","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1206:6:4","type":""}],"src":"1165:102:4"},{"body":{"nodeType":"YulBlock","src":"1301:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1318:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1321:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1311:6:4"},"nodeType":"YulFunctionCall","src":"1311:88:4"},"nodeType":"YulExpressionStatement","src":"1311:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1418:4:4","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1408:6:4"},"nodeType":"YulFunctionCall","src":"1408:15:4"},"nodeType":"YulExpressionStatement","src":"1408:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1439:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1442:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1432:6:4"},"nodeType":"YulFunctionCall","src":"1432:15:4"},"nodeType":"YulExpressionStatement","src":"1432:15:4"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1273:180:4"},{"body":{"nodeType":"YulBlock","src":"1502:238:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1512:58:4","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1534:6:4"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1564:4:4"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1542:21:4"},"nodeType":"YulFunctionCall","src":"1542:27:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1530:3:4"},"nodeType":"YulFunctionCall","src":"1530:40:4"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1516:10:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"1681:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1683:16:4"},"nodeType":"YulFunctionCall","src":"1683:18:4"},"nodeType":"YulExpressionStatement","src":"1683:18:4"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1624:10:4"},{"kind":"number","nodeType":"YulLiteral","src":"1636:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1621:2:4"},"nodeType":"YulFunctionCall","src":"1621:34:4"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1660:10:4"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1672:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1657:2:4"},"nodeType":"YulFunctionCall","src":"1657:22:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1618:2:4"},"nodeType":"YulFunctionCall","src":"1618:62:4"},"nodeType":"YulIf","src":"1615:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1719:2:4","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1723:10:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1712:6:4"},"nodeType":"YulFunctionCall","src":"1712:22:4"},"nodeType":"YulExpressionStatement","src":"1712:22:4"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1488:6:4","type":""},{"name":"size","nodeType":"YulTypedName","src":"1496:4:4","type":""}],"src":"1459:281:4"},{"body":{"nodeType":"YulBlock","src":"1787:88:4","statements":[{"nodeType":"YulAssignment","src":"1797:30:4","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1807:18:4"},"nodeType":"YulFunctionCall","src":"1807:20:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1797:6:4"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1856:6:4"},{"name":"size","nodeType":"YulIdentifier","src":"1864:4:4"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1836:19:4"},"nodeType":"YulFunctionCall","src":"1836:33:4"},"nodeType":"YulExpressionStatement","src":"1836:33:4"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1771:4:4","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1780:6:4","type":""}],"src":"1746:129:4"},{"body":{"nodeType":"YulBlock","src":"1963:229:4","statements":[{"body":{"nodeType":"YulBlock","src":"2068:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2070:16:4"},"nodeType":"YulFunctionCall","src":"2070:18:4"},"nodeType":"YulExpressionStatement","src":"2070:18:4"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2040:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"2048:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2037:2:4"},"nodeType":"YulFunctionCall","src":"2037:30:4"},"nodeType":"YulIf","src":"2034:56:4"},{"nodeType":"YulAssignment","src":"2100:25:4","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2112:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"2120:4:4","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2108:3:4"},"nodeType":"YulFunctionCall","src":"2108:17:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2100:4:4"}]},{"nodeType":"YulAssignment","src":"2162:23:4","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2174:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"2180:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2170:3:4"},"nodeType":"YulFunctionCall","src":"2170:15:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2162:4:4"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1947:6:4","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1958:4:4","type":""}],"src":"1881:311:4"},{"body":{"nodeType":"YulBlock","src":"2287:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2307:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2297:6:4"},"nodeType":"YulFunctionCall","src":"2297:12:4"},"nodeType":"YulExpressionStatement","src":"2297:12:4"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"2198:117:4"},{"body":{"nodeType":"YulBlock","src":"2440:608:4","statements":[{"nodeType":"YulAssignment","src":"2450:90:4","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2532:6:4"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2475:56:4"},"nodeType":"YulFunctionCall","src":"2475:64:4"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2459:15:4"},"nodeType":"YulFunctionCall","src":"2459:81:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2450:5:4"}]},{"nodeType":"YulVariableDeclaration","src":"2549:16:4","value":{"name":"array","nodeType":"YulIdentifier","src":"2560:5:4"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2553:3:4","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2582:5:4"},{"name":"length","nodeType":"YulIdentifier","src":"2589:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2575:6:4"},"nodeType":"YulFunctionCall","src":"2575:21:4"},"nodeType":"YulExpressionStatement","src":"2575:21:4"},{"nodeType":"YulAssignment","src":"2605:23:4","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2616:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2623:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2612:3:4"},"nodeType":"YulFunctionCall","src":"2612:16:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2605:3:4"}]},{"nodeType":"YulVariableDeclaration","src":"2638:44:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2656:6:4"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2668:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"2676:4:4","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2664:3:4"},"nodeType":"YulFunctionCall","src":"2664:17:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2652:3:4"},"nodeType":"YulFunctionCall","src":"2652:30:4"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2642:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2710:103:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"2724:77:4"},"nodeType":"YulFunctionCall","src":"2724:79:4"},"nodeType":"YulExpressionStatement","src":"2724:79:4"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2697:6:4"},{"name":"end","nodeType":"YulIdentifier","src":"2705:3:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2694:2:4"},"nodeType":"YulFunctionCall","src":"2694:15:4"},"nodeType":"YulIf","src":"2691:122:4"},{"body":{"nodeType":"YulBlock","src":"2898:144:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2913:21:4","value":{"name":"src","nodeType":"YulIdentifier","src":"2931:3:4"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"2917:10:4","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2955:3:4"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"2981:10:4"},{"name":"end","nodeType":"YulIdentifier","src":"2993:3:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2960:20:4"},"nodeType":"YulFunctionCall","src":"2960:37:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2948:6:4"},"nodeType":"YulFunctionCall","src":"2948:50:4"},"nodeType":"YulExpressionStatement","src":"2948:50:4"},{"nodeType":"YulAssignment","src":"3011:21:4","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3022:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"3027:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3018:3:4"},"nodeType":"YulFunctionCall","src":"3018:14:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3011:3:4"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2851:3:4"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2856:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2848:2:4"},"nodeType":"YulFunctionCall","src":"2848:15:4"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2864:25:4","statements":[{"nodeType":"YulAssignment","src":"2866:21:4","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2877:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"2882:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2873:3:4"},"nodeType":"YulFunctionCall","src":"2873:14:4"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2866:3:4"}]}]},"pre":{"nodeType":"YulBlock","src":"2826:21:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2828:17:4","value":{"name":"offset","nodeType":"YulIdentifier","src":"2839:6:4"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2832:3:4","type":""}]}]},"src":"2822:220:4"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2410:6:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"2418:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"2426:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2434:5:4","type":""}],"src":"2338:710:4"},{"body":{"nodeType":"YulBlock","src":"3148:293:4","statements":[{"body":{"nodeType":"YulBlock","src":"3197:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3199:77:4"},"nodeType":"YulFunctionCall","src":"3199:79:4"},"nodeType":"YulExpressionStatement","src":"3199:79:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3176:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"3184:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3172:3:4"},"nodeType":"YulFunctionCall","src":"3172:17:4"},{"name":"end","nodeType":"YulIdentifier","src":"3191:3:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3168:3:4"},"nodeType":"YulFunctionCall","src":"3168:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3161:6:4"},"nodeType":"YulFunctionCall","src":"3161:35:4"},"nodeType":"YulIf","src":"3158:122:4"},{"nodeType":"YulVariableDeclaration","src":"3289:34:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3316:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3303:12:4"},"nodeType":"YulFunctionCall","src":"3303:20:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3293:6:4","type":""}]},{"nodeType":"YulAssignment","src":"3332:103:4","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3408:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"3416:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3404:3:4"},"nodeType":"YulFunctionCall","src":"3404:17:4"},{"name":"length","nodeType":"YulIdentifier","src":"3423:6:4"},{"name":"end","nodeType":"YulIdentifier","src":"3431:3:4"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3341:62:4"},"nodeType":"YulFunctionCall","src":"3341:94:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3332:5:4"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3126:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"3134:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3142:5:4","type":""}],"src":"3071:370:4"},{"body":{"nodeType":"YulBlock","src":"3555:576:4","statements":[{"body":{"nodeType":"YulBlock","src":"3601:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3603:77:4"},"nodeType":"YulFunctionCall","src":"3603:79:4"},"nodeType":"YulExpressionStatement","src":"3603:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3576:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"3585:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3572:3:4"},"nodeType":"YulFunctionCall","src":"3572:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"3597:2:4","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3568:3:4"},"nodeType":"YulFunctionCall","src":"3568:32:4"},"nodeType":"YulIf","src":"3565:119:4"},{"nodeType":"YulBlock","src":"3694:117:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3709:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"3723:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3713:6:4","type":""}]},{"nodeType":"YulAssignment","src":"3738:63:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3773:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"3784:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3769:3:4"},"nodeType":"YulFunctionCall","src":"3769:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3793:7:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3748:20:4"},"nodeType":"YulFunctionCall","src":"3748:53:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3738:6:4"}]}]},{"nodeType":"YulBlock","src":"3821:303:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3836:46:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3867:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3878:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3863:3:4"},"nodeType":"YulFunctionCall","src":"3863:18:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3850:12:4"},"nodeType":"YulFunctionCall","src":"3850:32:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3840:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"3929:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3931:77:4"},"nodeType":"YulFunctionCall","src":"3931:79:4"},"nodeType":"YulExpressionStatement","src":"3931:79:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3901:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"3909:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3898:2:4"},"nodeType":"YulFunctionCall","src":"3898:30:4"},"nodeType":"YulIf","src":"3895:117:4"},{"nodeType":"YulAssignment","src":"4026:88:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4086:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"4097:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4082:3:4"},"nodeType":"YulFunctionCall","src":"4082:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4106:7:4"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4036:45:4"},"nodeType":"YulFunctionCall","src":"4036:78:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4026:6:4"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3517:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3528:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3540:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3548:6:4","type":""}],"src":"3447:684:4"},{"body":{"nodeType":"YulBlock","src":"4226:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4243:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4246:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4236:6:4"},"nodeType":"YulFunctionCall","src":"4236:12:4"},"nodeType":"YulExpressionStatement","src":"4236:12:4"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"4137:117:4"},{"body":{"nodeType":"YulBlock","src":"4347:478:4","statements":[{"body":{"nodeType":"YulBlock","src":"4396:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4398:77:4"},"nodeType":"YulFunctionCall","src":"4398:79:4"},"nodeType":"YulExpressionStatement","src":"4398:79:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4375:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4383:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4371:3:4"},"nodeType":"YulFunctionCall","src":"4371:17:4"},{"name":"end","nodeType":"YulIdentifier","src":"4390:3:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4367:3:4"},"nodeType":"YulFunctionCall","src":"4367:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4360:6:4"},"nodeType":"YulFunctionCall","src":"4360:35:4"},"nodeType":"YulIf","src":"4357:122:4"},{"nodeType":"YulAssignment","src":"4488:30:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4511:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4498:12:4"},"nodeType":"YulFunctionCall","src":"4498:20:4"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4488:6:4"}]},{"body":{"nodeType":"YulBlock","src":"4561:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"4563:77:4"},"nodeType":"YulFunctionCall","src":"4563:79:4"},"nodeType":"YulExpressionStatement","src":"4563:79:4"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4533:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4541:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4530:2:4"},"nodeType":"YulFunctionCall","src":"4530:30:4"},"nodeType":"YulIf","src":"4527:117:4"},{"nodeType":"YulAssignment","src":"4653:29:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4669:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4677:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4665:3:4"},"nodeType":"YulFunctionCall","src":"4665:17:4"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"4653:8:4"}]},{"body":{"nodeType":"YulBlock","src":"4736:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"4738:77:4"},"nodeType":"YulFunctionCall","src":"4738:79:4"},"nodeType":"YulExpressionStatement","src":"4738:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"4701:8:4"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4715:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4723:4:4","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4711:3:4"},"nodeType":"YulFunctionCall","src":"4711:17:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4697:3:4"},"nodeType":"YulFunctionCall","src":"4697:32:4"},{"name":"end","nodeType":"YulIdentifier","src":"4731:3:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4694:2:4"},"nodeType":"YulFunctionCall","src":"4694:41:4"},"nodeType":"YulIf","src":"4691:128:4"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4314:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"4322:3:4","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"4330:8:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"4340:6:4","type":""}],"src":"4273:552:4"},{"body":{"nodeType":"YulBlock","src":"4916:442:4","statements":[{"body":{"nodeType":"YulBlock","src":"4962:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4964:77:4"},"nodeType":"YulFunctionCall","src":"4964:79:4"},"nodeType":"YulExpressionStatement","src":"4964:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4937:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"4946:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4933:3:4"},"nodeType":"YulFunctionCall","src":"4933:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"4958:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4929:3:4"},"nodeType":"YulFunctionCall","src":"4929:32:4"},"nodeType":"YulIf","src":"4926:119:4"},{"nodeType":"YulBlock","src":"5055:296:4","statements":[{"nodeType":"YulVariableDeclaration","src":"5070:45:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5101:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5112:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5097:3:4"},"nodeType":"YulFunctionCall","src":"5097:17:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5084:12:4"},"nodeType":"YulFunctionCall","src":"5084:31:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5074:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"5162:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5164:77:4"},"nodeType":"YulFunctionCall","src":"5164:79:4"},"nodeType":"YulExpressionStatement","src":"5164:79:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5134:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"5142:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5131:2:4"},"nodeType":"YulFunctionCall","src":"5131:30:4"},"nodeType":"YulIf","src":"5128:117:4"},{"nodeType":"YulAssignment","src":"5259:82:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5313:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"5324:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5309:3:4"},"nodeType":"YulFunctionCall","src":"5309:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5333:7:4"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"5277:31:4"},"nodeType":"YulFunctionCall","src":"5277:64:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5259:6:4"},{"name":"value1","nodeType":"YulIdentifier","src":"5267:6:4"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4878:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4889:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4901:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4909:6:4","type":""}],"src":"4831:527:4"},{"body":{"nodeType":"YulBlock","src":"5430:263:4","statements":[{"body":{"nodeType":"YulBlock","src":"5476:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5478:77:4"},"nodeType":"YulFunctionCall","src":"5478:79:4"},"nodeType":"YulExpressionStatement","src":"5478:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5451:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"5460:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5447:3:4"},"nodeType":"YulFunctionCall","src":"5447:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"5472:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5443:3:4"},"nodeType":"YulFunctionCall","src":"5443:32:4"},"nodeType":"YulIf","src":"5440:119:4"},{"nodeType":"YulBlock","src":"5569:117:4","statements":[{"nodeType":"YulVariableDeclaration","src":"5584:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"5598:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5588:6:4","type":""}]},{"nodeType":"YulAssignment","src":"5613:63:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5648:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"5659:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5644:3:4"},"nodeType":"YulFunctionCall","src":"5644:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5668:7:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5623:20:4"},"nodeType":"YulFunctionCall","src":"5623:53:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5613:6:4"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5400:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5411:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5423:6:4","type":""}],"src":"5364:329:4"},{"body":{"nodeType":"YulBlock","src":"5744:81:4","statements":[{"nodeType":"YulAssignment","src":"5754:65:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5769:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"5776:42:4","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5765:3:4"},"nodeType":"YulFunctionCall","src":"5765:54:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5754:7:4"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5726:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5736:7:4","type":""}],"src":"5699:126:4"},{"body":{"nodeType":"YulBlock","src":"5876:51:4","statements":[{"nodeType":"YulAssignment","src":"5886:35:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5915:5:4"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5897:17:4"},"nodeType":"YulFunctionCall","src":"5897:24:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5886:7:4"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5858:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5868:7:4","type":""}],"src":"5831:96:4"},{"body":{"nodeType":"YulBlock","src":"5998:53:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6015:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6038:5:4"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6020:17:4"},"nodeType":"YulFunctionCall","src":"6020:24:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6008:6:4"},"nodeType":"YulFunctionCall","src":"6008:37:4"},"nodeType":"YulExpressionStatement","src":"6008:37:4"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5986:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5993:3:4","type":""}],"src":"5933:118:4"},{"body":{"nodeType":"YulBlock","src":"6155:124:4","statements":[{"nodeType":"YulAssignment","src":"6165:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6177:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"6188:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6173:3:4"},"nodeType":"YulFunctionCall","src":"6173:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6165:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6245:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6258:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"6269:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6254:3:4"},"nodeType":"YulFunctionCall","src":"6254:17:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6201:43:4"},"nodeType":"YulFunctionCall","src":"6201:71:4"},"nodeType":"YulExpressionStatement","src":"6201:71:4"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6127:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6139:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6150:4:4","type":""}],"src":"6057:222:4"},{"body":{"nodeType":"YulBlock","src":"6313:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6330:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6333:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6323:6:4"},"nodeType":"YulFunctionCall","src":"6323:88:4"},"nodeType":"YulExpressionStatement","src":"6323:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6427:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6430:4:4","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6420:6:4"},"nodeType":"YulFunctionCall","src":"6420:15:4"},"nodeType":"YulExpressionStatement","src":"6420:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6451:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6454:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6444:6:4"},"nodeType":"YulFunctionCall","src":"6444:15:4"},"nodeType":"YulExpressionStatement","src":"6444:15:4"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"6285:180:4"},{"body":{"nodeType":"YulBlock","src":"6530:62:4","statements":[{"body":{"nodeType":"YulBlock","src":"6564:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"6566:16:4"},"nodeType":"YulFunctionCall","src":"6566:18:4"},"nodeType":"YulExpressionStatement","src":"6566:18:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6553:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"6560:1:4","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6550:2:4"},"nodeType":"YulFunctionCall","src":"6550:12:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6543:6:4"},"nodeType":"YulFunctionCall","src":"6543:20:4"},"nodeType":"YulIf","src":"6540:46:4"}]},"name":"validator_assert_t_enum$_LotteryState_$192","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6523:5:4","type":""}],"src":"6471:121:4"},{"body":{"nodeType":"YulBlock","src":"6659:82:4","statements":[{"nodeType":"YulAssignment","src":"6669:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"6680:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6669:7:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6729:5:4"}],"functionName":{"name":"validator_assert_t_enum$_LotteryState_$192","nodeType":"YulIdentifier","src":"6686:42:4"},"nodeType":"YulFunctionCall","src":"6686:49:4"},"nodeType":"YulExpressionStatement","src":"6686:49:4"}]},"name":"cleanup_t_enum$_LotteryState_$192","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6641:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6651:7:4","type":""}],"src":"6598:143:4"},{"body":{"nodeType":"YulBlock","src":"6821:69:4","statements":[{"nodeType":"YulAssignment","src":"6831:53:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6878:5:4"}],"functionName":{"name":"cleanup_t_enum$_LotteryState_$192","nodeType":"YulIdentifier","src":"6844:33:4"},"nodeType":"YulFunctionCall","src":"6844:40:4"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"6831:9:4"}]}]},"name":"convert_t_enum$_LotteryState_$192_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6801:5:4","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"6811:9:4","type":""}],"src":"6747:143:4"},{"body":{"nodeType":"YulBlock","src":"6975:80:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6992:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7042:5:4"}],"functionName":{"name":"convert_t_enum$_LotteryState_$192_to_t_uint8","nodeType":"YulIdentifier","src":"6997:44:4"},"nodeType":"YulFunctionCall","src":"6997:51:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6985:6:4"},"nodeType":"YulFunctionCall","src":"6985:64:4"},"nodeType":"YulExpressionStatement","src":"6985:64:4"}]},"name":"abi_encode_t_enum$_LotteryState_$192_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6963:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6970:3:4","type":""}],"src":"6896:159:4"},{"body":{"nodeType":"YulBlock","src":"7173:138:4","statements":[{"nodeType":"YulAssignment","src":"7183:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7195:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"7206:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7191:3:4"},"nodeType":"YulFunctionCall","src":"7191:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7183:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7277:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7290:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"7301:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7286:3:4"},"nodeType":"YulFunctionCall","src":"7286:17:4"}],"functionName":{"name":"abi_encode_t_enum$_LotteryState_$192_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"7219:57:4"},"nodeType":"YulFunctionCall","src":"7219:85:4"},"nodeType":"YulExpressionStatement","src":"7219:85:4"}]},"name":"abi_encode_tuple_t_enum$_LotteryState_$192__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7145:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7157:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7168:4:4","type":""}],"src":"7061:250:4"},{"body":{"nodeType":"YulBlock","src":"7406:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7423:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7426:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7416:6:4"},"nodeType":"YulFunctionCall","src":"7416:12:4"},"nodeType":"YulExpressionStatement","src":"7416:12:4"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7317:117:4"},{"body":{"nodeType":"YulBlock","src":"7506:241:4","statements":[{"body":{"nodeType":"YulBlock","src":"7611:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7613:16:4"},"nodeType":"YulFunctionCall","src":"7613:18:4"},"nodeType":"YulExpressionStatement","src":"7613:18:4"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7583:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"7591:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7580:2:4"},"nodeType":"YulFunctionCall","src":"7580:30:4"},"nodeType":"YulIf","src":"7577:56:4"},{"nodeType":"YulAssignment","src":"7643:37:4","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7673:6:4"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7651:21:4"},"nodeType":"YulFunctionCall","src":"7651:29:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7643:4:4"}]},{"nodeType":"YulAssignment","src":"7717:23:4","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7729:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"7735:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7725:3:4"},"nodeType":"YulFunctionCall","src":"7725:15:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7717:4:4"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7490:6:4","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7501:4:4","type":""}],"src":"7440:307:4"},{"body":{"nodeType":"YulBlock","src":"7817:82:4","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7840:3:4"},{"name":"src","nodeType":"YulIdentifier","src":"7845:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"7850:6:4"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"7827:12:4"},"nodeType":"YulFunctionCall","src":"7827:30:4"},"nodeType":"YulExpressionStatement","src":"7827:30:4"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7877:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"7882:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7873:3:4"},"nodeType":"YulFunctionCall","src":"7873:16:4"},{"kind":"number","nodeType":"YulLiteral","src":"7891:1:4","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7866:6:4"},"nodeType":"YulFunctionCall","src":"7866:27:4"},"nodeType":"YulExpressionStatement","src":"7866:27:4"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7799:3:4","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7804:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"7809:6:4","type":""}],"src":"7753:146:4"},{"body":{"nodeType":"YulBlock","src":"7988:340:4","statements":[{"nodeType":"YulAssignment","src":"7998:74:4","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8064:6:4"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8023:40:4"},"nodeType":"YulFunctionCall","src":"8023:48:4"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8007:15:4"},"nodeType":"YulFunctionCall","src":"8007:65:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7998:5:4"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8088:5:4"},{"name":"length","nodeType":"YulIdentifier","src":"8095:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8081:6:4"},"nodeType":"YulFunctionCall","src":"8081:21:4"},"nodeType":"YulExpressionStatement","src":"8081:21:4"},{"nodeType":"YulVariableDeclaration","src":"8111:27:4","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8126:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"8133:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8122:3:4"},"nodeType":"YulFunctionCall","src":"8122:16:4"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8115:3:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"8176:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8178:77:4"},"nodeType":"YulFunctionCall","src":"8178:79:4"},"nodeType":"YulExpressionStatement","src":"8178:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8157:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"8162:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8153:3:4"},"nodeType":"YulFunctionCall","src":"8153:16:4"},{"name":"end","nodeType":"YulIdentifier","src":"8171:3:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8150:2:4"},"nodeType":"YulFunctionCall","src":"8150:25:4"},"nodeType":"YulIf","src":"8147:112:4"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8305:3:4"},{"name":"dst","nodeType":"YulIdentifier","src":"8310:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"8315:6:4"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8268:36:4"},"nodeType":"YulFunctionCall","src":"8268:54:4"},"nodeType":"YulExpressionStatement","src":"8268:54:4"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7961:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"7966:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"7974:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7982:5:4","type":""}],"src":"7905:423:4"},{"body":{"nodeType":"YulBlock","src":"8408:277:4","statements":[{"body":{"nodeType":"YulBlock","src":"8457:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8459:77:4"},"nodeType":"YulFunctionCall","src":"8459:79:4"},"nodeType":"YulExpressionStatement","src":"8459:79:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8436:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"8444:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8432:3:4"},"nodeType":"YulFunctionCall","src":"8432:17:4"},{"name":"end","nodeType":"YulIdentifier","src":"8451:3:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8428:3:4"},"nodeType":"YulFunctionCall","src":"8428:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8421:6:4"},"nodeType":"YulFunctionCall","src":"8421:35:4"},"nodeType":"YulIf","src":"8418:122:4"},{"nodeType":"YulVariableDeclaration","src":"8549:34:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8576:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8563:12:4"},"nodeType":"YulFunctionCall","src":"8563:20:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8553:6:4","type":""}]},{"nodeType":"YulAssignment","src":"8592:87:4","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8652:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"8660:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8648:3:4"},"nodeType":"YulFunctionCall","src":"8648:17:4"},{"name":"length","nodeType":"YulIdentifier","src":"8667:6:4"},{"name":"end","nodeType":"YulIdentifier","src":"8675:3:4"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8601:46:4"},"nodeType":"YulFunctionCall","src":"8601:78:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8592:5:4"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8386:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"8394:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8402:5:4","type":""}],"src":"8347:338:4"},{"body":{"nodeType":"YulBlock","src":"8766:432:4","statements":[{"body":{"nodeType":"YulBlock","src":"8812:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8814:77:4"},"nodeType":"YulFunctionCall","src":"8814:79:4"},"nodeType":"YulExpressionStatement","src":"8814:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8787:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"8796:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8783:3:4"},"nodeType":"YulFunctionCall","src":"8783:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"8808:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8779:3:4"},"nodeType":"YulFunctionCall","src":"8779:32:4"},"nodeType":"YulIf","src":"8776:119:4"},{"nodeType":"YulBlock","src":"8905:286:4","statements":[{"nodeType":"YulVariableDeclaration","src":"8920:45:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8951:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"8962:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8947:3:4"},"nodeType":"YulFunctionCall","src":"8947:17:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8934:12:4"},"nodeType":"YulFunctionCall","src":"8934:31:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8924:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"9012:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9014:77:4"},"nodeType":"YulFunctionCall","src":"9014:79:4"},"nodeType":"YulExpressionStatement","src":"9014:79:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8984:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"8992:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8981:2:4"},"nodeType":"YulFunctionCall","src":"8981:30:4"},"nodeType":"YulIf","src":"8978:117:4"},{"nodeType":"YulAssignment","src":"9109:72:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9153:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"9164:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9149:3:4"},"nodeType":"YulFunctionCall","src":"9149:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9173:7:4"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9119:29:4"},"nodeType":"YulFunctionCall","src":"9119:62:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9109:6:4"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8736:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8747:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8759:6:4","type":""}],"src":"8691:507:4"},{"body":{"nodeType":"YulBlock","src":"9246:48:4","statements":[{"nodeType":"YulAssignment","src":"9256:32:4","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9281:5:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9274:6:4"},"nodeType":"YulFunctionCall","src":"9274:13:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9267:6:4"},"nodeType":"YulFunctionCall","src":"9267:21:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9256:7:4"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9228:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9238:7:4","type":""}],"src":"9204:90:4"},{"body":{"nodeType":"YulBlock","src":"9359:50:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9376:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9396:5:4"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9381:14:4"},"nodeType":"YulFunctionCall","src":"9381:21:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9369:6:4"},"nodeType":"YulFunctionCall","src":"9369:34:4"},"nodeType":"YulExpressionStatement","src":"9369:34:4"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9347:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9354:3:4","type":""}],"src":"9300:109:4"},{"body":{"nodeType":"YulBlock","src":"9473:40:4","statements":[{"nodeType":"YulAssignment","src":"9484:22:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9500:5:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9494:5:4"},"nodeType":"YulFunctionCall","src":"9494:12:4"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9484:6:4"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9456:5:4","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9466:6:4","type":""}],"src":"9415:98:4"},{"body":{"nodeType":"YulBlock","src":"9614:73:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9631:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"9636:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9624:6:4"},"nodeType":"YulFunctionCall","src":"9624:19:4"},"nodeType":"YulExpressionStatement","src":"9624:19:4"},{"nodeType":"YulAssignment","src":"9652:29:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9671:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"9676:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9667:3:4"},"nodeType":"YulFunctionCall","src":"9667:14:4"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9652:11:4"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9586:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"9591:6:4","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9602:11:4","type":""}],"src":"9519:168:4"},{"body":{"nodeType":"YulBlock","src":"9755:184:4","statements":[{"nodeType":"YulVariableDeclaration","src":"9765:10:4","value":{"kind":"number","nodeType":"YulLiteral","src":"9774:1:4","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9769:1:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"9834:63:4","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9859:3:4"},{"name":"i","nodeType":"YulIdentifier","src":"9864:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9855:3:4"},"nodeType":"YulFunctionCall","src":"9855:11:4"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9878:3:4"},{"name":"i","nodeType":"YulIdentifier","src":"9883:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9874:3:4"},"nodeType":"YulFunctionCall","src":"9874:11:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9868:5:4"},"nodeType":"YulFunctionCall","src":"9868:18:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9848:6:4"},"nodeType":"YulFunctionCall","src":"9848:39:4"},"nodeType":"YulExpressionStatement","src":"9848:39:4"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9795:1:4"},{"name":"length","nodeType":"YulIdentifier","src":"9798:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9792:2:4"},"nodeType":"YulFunctionCall","src":"9792:13:4"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9806:19:4","statements":[{"nodeType":"YulAssignment","src":"9808:15:4","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9817:1:4"},{"kind":"number","nodeType":"YulLiteral","src":"9820:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9813:3:4"},"nodeType":"YulFunctionCall","src":"9813:10:4"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9808:1:4"}]}]},"pre":{"nodeType":"YulBlock","src":"9788:3:4","statements":[]},"src":"9784:113:4"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9917:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"9922:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9913:3:4"},"nodeType":"YulFunctionCall","src":"9913:16:4"},{"kind":"number","nodeType":"YulLiteral","src":"9931:1:4","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9906:6:4"},"nodeType":"YulFunctionCall","src":"9906:27:4"},"nodeType":"YulExpressionStatement","src":"9906:27:4"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9737:3:4","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9742:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"9747:6:4","type":""}],"src":"9693:246:4"},{"body":{"nodeType":"YulBlock","src":"10035:283:4","statements":[{"nodeType":"YulVariableDeclaration","src":"10045:52:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10091:5:4"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"10059:31:4"},"nodeType":"YulFunctionCall","src":"10059:38:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10049:6:4","type":""}]},{"nodeType":"YulAssignment","src":"10106:77:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10171:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"10176:6:4"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10113:57:4"},"nodeType":"YulFunctionCall","src":"10113:70:4"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10106:3:4"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10231:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"10238:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10227:3:4"},"nodeType":"YulFunctionCall","src":"10227:16:4"},{"name":"pos","nodeType":"YulIdentifier","src":"10245:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"10250:6:4"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10192:34:4"},"nodeType":"YulFunctionCall","src":"10192:65:4"},"nodeType":"YulExpressionStatement","src":"10192:65:4"},{"nodeType":"YulAssignment","src":"10266:46:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10277:3:4"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10304:6:4"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10282:21:4"},"nodeType":"YulFunctionCall","src":"10282:29:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10273:3:4"},"nodeType":"YulFunctionCall","src":"10273:39:4"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10266:3:4"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10016:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10023:3:4","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10031:3:4","type":""}],"src":"9945:373:4"},{"body":{"nodeType":"YulBlock","src":"10462:269:4","statements":[{"nodeType":"YulAssignment","src":"10472:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10484:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"10495:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10480:3:4"},"nodeType":"YulFunctionCall","src":"10480:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10472:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10546:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10559:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"10570:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10555:3:4"},"nodeType":"YulFunctionCall","src":"10555:17:4"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"10508:37:4"},"nodeType":"YulFunctionCall","src":"10508:65:4"},"nodeType":"YulExpressionStatement","src":"10508:65:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10594:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"10605:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10590:3:4"},"nodeType":"YulFunctionCall","src":"10590:18:4"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10614:4:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"10620:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10610:3:4"},"nodeType":"YulFunctionCall","src":"10610:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10583:6:4"},"nodeType":"YulFunctionCall","src":"10583:48:4"},"nodeType":"YulExpressionStatement","src":"10583:48:4"},{"nodeType":"YulAssignment","src":"10640:84:4","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10710:6:4"},{"name":"tail","nodeType":"YulIdentifier","src":"10719:4:4"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10648:61:4"},"nodeType":"YulFunctionCall","src":"10648:76:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10640:4:4"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10426:9:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10438:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10446:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10457:4:4","type":""}],"src":"10324:407:4"},{"body":{"nodeType":"YulBlock","src":"10863:206:4","statements":[{"nodeType":"YulAssignment","src":"10873:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10885:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"10896:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10881:3:4"},"nodeType":"YulFunctionCall","src":"10881:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10873:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10953:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10966:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"10977:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10962:3:4"},"nodeType":"YulFunctionCall","src":"10962:17:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10909:43:4"},"nodeType":"YulFunctionCall","src":"10909:71:4"},"nodeType":"YulExpressionStatement","src":"10909:71:4"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11034:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11047:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"11058:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11043:3:4"},"nodeType":"YulFunctionCall","src":"11043:18:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10990:43:4"},"nodeType":"YulFunctionCall","src":"10990:72:4"},"nodeType":"YulExpressionStatement","src":"10990:72:4"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10827:9:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10839:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10847:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10858:4:4","type":""}],"src":"10737:332:4"},{"body":{"nodeType":"YulBlock","src":"11229:288:4","statements":[{"nodeType":"YulAssignment","src":"11239:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11251:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"11262:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11247:3:4"},"nodeType":"YulFunctionCall","src":"11247:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11239:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11319:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11332:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"11343:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11328:3:4"},"nodeType":"YulFunctionCall","src":"11328:17:4"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11275:43:4"},"nodeType":"YulFunctionCall","src":"11275:71:4"},"nodeType":"YulExpressionStatement","src":"11275:71:4"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11400:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11413:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"11424:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11409:3:4"},"nodeType":"YulFunctionCall","src":"11409:18:4"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11356:43:4"},"nodeType":"YulFunctionCall","src":"11356:72:4"},"nodeType":"YulExpressionStatement","src":"11356:72:4"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11482:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11495:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"11506:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11491:3:4"},"nodeType":"YulFunctionCall","src":"11491:18:4"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11438:43:4"},"nodeType":"YulFunctionCall","src":"11438:72:4"},"nodeType":"YulExpressionStatement","src":"11438:72:4"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11185:9:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11197:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11205:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11213:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11224:4:4","type":""}],"src":"11075:442:4"},{"body":{"nodeType":"YulBlock","src":"11568:32:4","statements":[{"nodeType":"YulAssignment","src":"11578:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"11589:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11578:7:4"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11550:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11560:7:4","type":""}],"src":"11523:77:4"},{"body":{"nodeType":"YulBlock","src":"11671:53:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11688:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11711:5:4"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"11693:17:4"},"nodeType":"YulFunctionCall","src":"11693:24:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11681:6:4"},"nodeType":"YulFunctionCall","src":"11681:37:4"},"nodeType":"YulExpressionStatement","src":"11681:37:4"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11659:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11666:3:4","type":""}],"src":"11606:118:4"},{"body":{"nodeType":"YulBlock","src":"11774:57:4","statements":[{"nodeType":"YulAssignment","src":"11784:41:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11799:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"11806:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11795:3:4"},"nodeType":"YulFunctionCall","src":"11795:30:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11784:7:4"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11756:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11766:7:4","type":""}],"src":"11730:101:4"},{"body":{"nodeType":"YulBlock","src":"11900:52:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11917:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11939:5:4"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"11922:16:4"},"nodeType":"YulFunctionCall","src":"11922:23:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11910:6:4"},"nodeType":"YulFunctionCall","src":"11910:36:4"},"nodeType":"YulExpressionStatement","src":"11910:36:4"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11888:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11895:3:4","type":""}],"src":"11837:115:4"},{"body":{"nodeType":"YulBlock","src":"12002:45:4","statements":[{"nodeType":"YulAssignment","src":"12012:29:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12027:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"12034:6:4","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12023:3:4"},"nodeType":"YulFunctionCall","src":"12023:18:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12012:7:4"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11984:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11994:7:4","type":""}],"src":"11958:89:4"},{"body":{"nodeType":"YulBlock","src":"12116:52:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12133:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12155:5:4"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"12138:16:4"},"nodeType":"YulFunctionCall","src":"12138:23:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12126:6:4"},"nodeType":"YulFunctionCall","src":"12126:36:4"},"nodeType":"YulExpressionStatement","src":"12126:36:4"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12104:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12111:3:4","type":""}],"src":"12053:115:4"},{"body":{"nodeType":"YulBlock","src":"12218:49:4","statements":[{"nodeType":"YulAssignment","src":"12228:33:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12243:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"12250:10:4","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12239:3:4"},"nodeType":"YulFunctionCall","src":"12239:22:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12228:7:4"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12200:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12210:7:4","type":""}],"src":"12174:93:4"},{"body":{"nodeType":"YulBlock","src":"12336:52:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12353:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12375:5:4"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"12358:16:4"},"nodeType":"YulFunctionCall","src":"12358:23:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12346:6:4"},"nodeType":"YulFunctionCall","src":"12346:36:4"},"nodeType":"YulExpressionStatement","src":"12346:36:4"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12324:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12331:3:4","type":""}],"src":"12273:115:4"},{"body":{"nodeType":"YulBlock","src":"12596:446:4","statements":[{"nodeType":"YulAssignment","src":"12606:27:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12618:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"12629:3:4","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12614:3:4"},"nodeType":"YulFunctionCall","src":"12614:19:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12606:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12687:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12700:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"12711:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12696:3:4"},"nodeType":"YulFunctionCall","src":"12696:17:4"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"12643:43:4"},"nodeType":"YulFunctionCall","src":"12643:71:4"},"nodeType":"YulExpressionStatement","src":"12643:71:4"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12766:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12779:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"12790:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12775:3:4"},"nodeType":"YulFunctionCall","src":"12775:18:4"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"12724:41:4"},"nodeType":"YulFunctionCall","src":"12724:70:4"},"nodeType":"YulExpressionStatement","src":"12724:70:4"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12846:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12859:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"12870:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12855:3:4"},"nodeType":"YulFunctionCall","src":"12855:18:4"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"12804:41:4"},"nodeType":"YulFunctionCall","src":"12804:70:4"},"nodeType":"YulExpressionStatement","src":"12804:70:4"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"12926:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12939:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"12950:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12935:3:4"},"nodeType":"YulFunctionCall","src":"12935:18:4"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"12884:41:4"},"nodeType":"YulFunctionCall","src":"12884:70:4"},"nodeType":"YulExpressionStatement","src":"12884:70:4"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13006:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13019:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"13030:3:4","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13015:3:4"},"nodeType":"YulFunctionCall","src":"13015:19:4"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"12964:41:4"},"nodeType":"YulFunctionCall","src":"12964:71:4"},"nodeType":"YulExpressionStatement","src":"12964:71:4"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12536:9:4","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12548:6:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12556:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12564:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12572:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12580:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12591:4:4","type":""}],"src":"12394:648:4"},{"body":{"nodeType":"YulBlock","src":"13111:80:4","statements":[{"nodeType":"YulAssignment","src":"13121:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13136:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13130:5:4"},"nodeType":"YulFunctionCall","src":"13130:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13121:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13179:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"13152:26:4"},"nodeType":"YulFunctionCall","src":"13152:33:4"},"nodeType":"YulExpressionStatement","src":"13152:33:4"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13089:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"13097:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13105:5:4","type":""}],"src":"13048:143:4"},{"body":{"nodeType":"YulBlock","src":"13274:274:4","statements":[{"body":{"nodeType":"YulBlock","src":"13320:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13322:77:4"},"nodeType":"YulFunctionCall","src":"13322:79:4"},"nodeType":"YulExpressionStatement","src":"13322:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13295:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"13304:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13291:3:4"},"nodeType":"YulFunctionCall","src":"13291:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"13316:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13287:3:4"},"nodeType":"YulFunctionCall","src":"13287:32:4"},"nodeType":"YulIf","src":"13284:119:4"},{"nodeType":"YulBlock","src":"13413:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"13428:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"13442:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13432:6:4","type":""}]},{"nodeType":"YulAssignment","src":"13457:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13503:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"13514:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13499:3:4"},"nodeType":"YulFunctionCall","src":"13499:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13523:7:4"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"13467:31:4"},"nodeType":"YulFunctionCall","src":"13467:64:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13457:6:4"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13244:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13255:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13267:6:4","type":""}],"src":"13197:351:4"},{"body":{"nodeType":"YulBlock","src":"13582:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13599:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13602:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13592:6:4"},"nodeType":"YulFunctionCall","src":"13592:88:4"},"nodeType":"YulExpressionStatement","src":"13592:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13696:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13699:4:4","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13689:6:4"},"nodeType":"YulFunctionCall","src":"13689:15:4"},"nodeType":"YulExpressionStatement","src":"13689:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13720:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13723:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13713:6:4"},"nodeType":"YulFunctionCall","src":"13713:15:4"},"nodeType":"YulExpressionStatement","src":"13713:15:4"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"13554:180:4"},{"body":{"nodeType":"YulBlock","src":"13768:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13785:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13788:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13778:6:4"},"nodeType":"YulFunctionCall","src":"13778:88:4"},"nodeType":"YulExpressionStatement","src":"13778:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13882:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13885:4:4","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13875:6:4"},"nodeType":"YulFunctionCall","src":"13875:15:4"},"nodeType":"YulExpressionStatement","src":"13875:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13906:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13909:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13899:6:4"},"nodeType":"YulFunctionCall","src":"13899:15:4"},"nodeType":"YulExpressionStatement","src":"13899:15:4"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"13740:180:4"},{"body":{"nodeType":"YulBlock","src":"13971:149:4","statements":[{"nodeType":"YulAssignment","src":"13981:25:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14004:1:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13986:17:4"},"nodeType":"YulFunctionCall","src":"13986:20:4"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"13981:1:4"}]},{"nodeType":"YulAssignment","src":"14015:25:4","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14038:1:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14020:17:4"},"nodeType":"YulFunctionCall","src":"14020:20:4"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"14015:1:4"}]},{"nodeType":"YulAssignment","src":"14049:17:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14061:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"14064:1:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14057:3:4"},"nodeType":"YulFunctionCall","src":"14057:9:4"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14049:4:4"}]},{"body":{"nodeType":"YulBlock","src":"14091:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14093:16:4"},"nodeType":"YulFunctionCall","src":"14093:18:4"},"nodeType":"YulExpressionStatement","src":"14093:18:4"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"14082:4:4"},{"name":"x","nodeType":"YulIdentifier","src":"14088:1:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14079:2:4"},"nodeType":"YulFunctionCall","src":"14079:11:4"},"nodeType":"YulIf","src":"14076:37:4"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13957:1:4","type":""},{"name":"y","nodeType":"YulTypedName","src":"13960:1:4","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"13966:4:4","type":""}],"src":"13926:194:4"},{"body":{"nodeType":"YulBlock","src":"14154:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14171:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14174:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14164:6:4"},"nodeType":"YulFunctionCall","src":"14164:88:4"},"nodeType":"YulExpressionStatement","src":"14164:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14268:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14271:4:4","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14261:6:4"},"nodeType":"YulFunctionCall","src":"14261:15:4"},"nodeType":"YulExpressionStatement","src":"14261:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14292:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14295:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14285:6:4"},"nodeType":"YulFunctionCall","src":"14285:15:4"},"nodeType":"YulExpressionStatement","src":"14285:15:4"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"14126:180:4"},{"body":{"nodeType":"YulBlock","src":"14346:142:4","statements":[{"nodeType":"YulAssignment","src":"14356:25:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14379:1:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14361:17:4"},"nodeType":"YulFunctionCall","src":"14361:20:4"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"14356:1:4"}]},{"nodeType":"YulAssignment","src":"14390:25:4","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14413:1:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14395:17:4"},"nodeType":"YulFunctionCall","src":"14395:20:4"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"14390:1:4"}]},{"body":{"nodeType":"YulBlock","src":"14437:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"14439:16:4"},"nodeType":"YulFunctionCall","src":"14439:18:4"},"nodeType":"YulExpressionStatement","src":"14439:18:4"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14434:1:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14427:6:4"},"nodeType":"YulFunctionCall","src":"14427:9:4"},"nodeType":"YulIf","src":"14424:35:4"},{"nodeType":"YulAssignment","src":"14468:14:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14477:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"14480:1:4"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"14473:3:4"},"nodeType":"YulFunctionCall","src":"14473:9:4"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"14468:1:4"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14335:1:4","type":""},{"name":"y","nodeType":"YulTypedName","src":"14338:1:4","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"14344:1:4","type":""}],"src":"14312:176:4"},{"body":{"nodeType":"YulBlock","src":"14607:34:4","statements":[{"nodeType":"YulAssignment","src":"14617:18:4","value":{"name":"pos","nodeType":"YulIdentifier","src":"14632:3:4"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14617:11:4"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14579:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"14584:6:4","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14595:11:4","type":""}],"src":"14494:147:4"},{"body":{"nodeType":"YulBlock","src":"14753:8:4","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14745:6:4","type":""}],"src":"14647:114:4"},{"body":{"nodeType":"YulBlock","src":"14930:235:4","statements":[{"nodeType":"YulAssignment","src":"14940:90:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15023:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"15028:1:4","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"14947:75:4"},"nodeType":"YulFunctionCall","src":"14947:83:4"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14940:3:4"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15128:3:4"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"15039:88:4"},"nodeType":"YulFunctionCall","src":"15039:93:4"},"nodeType":"YulExpressionStatement","src":"15039:93:4"},{"nodeType":"YulAssignment","src":"15141:18:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15152:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"15157:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15148:3:4"},"nodeType":"YulFunctionCall","src":"15148:11:4"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15141:3:4"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14918:3:4","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14926:3:4","type":""}],"src":"14767:398:4"},{"body":{"nodeType":"YulBlock","src":"15359:191:4","statements":[{"nodeType":"YulAssignment","src":"15370:154:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15520:3:4"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15377:141:4"},"nodeType":"YulFunctionCall","src":"15377:147:4"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15370:3:4"}]},{"nodeType":"YulAssignment","src":"15534:10:4","value":{"name":"pos","nodeType":"YulIdentifier","src":"15541:3:4"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15534:3:4"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15346:3:4","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15355:3:4","type":""}],"src":"15171:379:4"}]},"contents":"{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_LotteryState_$192(value) {\n        if iszero(lt(value, 2)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_LotteryState_$192(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_LotteryState_$192(value)\n    }\n\n    function convert_t_enum$_LotteryState_$192_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_LotteryState_$192(value)\n    }\n\n    function abi_encode_t_enum$_LotteryState_$192_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_LotteryState_$192_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_enum$_LotteryState_$192__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_LotteryState_$192_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n}\n","id":4,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":800},{"length":32,"start":884}],"194":[{"length":32,"start":762},{"length":32,"start":1815}],"200":[{"length":32,"start":1183}],"202":[{"length":32,"start":1243}],"204":[{"length":32,"start":1276}],"209":[{"length":32,"start":1311}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x53A2C19A GT PUSH2 0x7F JUMPI DUP1 PUSH4 0x6E04FF0D GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x2CB JUMPI PUSH2 0xC2 JUMP JUMPDEST DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x5F1B0FD8 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x6B68C03C EQ PUSH2 0x22D JUMPI PUSH2 0xC2 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x320229EB EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x460E2049 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x1AC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x114 SWAP2 SWAP1 PUSH2 0xD35 JUMP JUMPDEST PUSH2 0x31E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13D SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0xDEC JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x191 SWAP2 SWAP1 PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x5D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xEA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C1 PUSH2 0x61F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0xEA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x658 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x224 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24F SWAP2 SWAP1 PUSH2 0xF39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x1009 JUMP JUMPDEST PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28D SWAP3 SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AB PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B8 SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C9 PUSH2 0x715 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E0 PUSH2 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D0 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP3 SWAP2 SWAP1 PUSH2 0x111C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3DA DUP3 DUP3 PUSH2 0x890 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x402 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x67C JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x471 JUMPI SELFBALANCE PUSH1 0x0 DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x433 JUMPI PUSH2 0x432 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3C96B78A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x468 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x496 JUMPI PUSH2 0x495 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x560 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x57F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5A3 SWAP2 SWAP1 PUSH2 0x125C JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xEBF56642252004C18A776F30D528E7A0CE8C5DB14B6596FB6550F630C8A24C6C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x5ED JUMPI PUSH2 0x5EC PUSH2 0x1289 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A3 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B7 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x6CE SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x6EE JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x6F7 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x700 JUMPI POP DUP1 JUMPDEST SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x76F JUMPI PUSH1 0x40 MLOAD PUSH32 0xEC269FD100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x783 JUMPI PUSH2 0x782 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7A5 JUMPI PUSH2 0x7A4 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0xE76BE6FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D64FB5BA9F2548C5B98468D58F25B87B9E866AFEE0122E92D9FE722BF85076C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8AB JUMPI PUSH2 0x8AA PUSH2 0x1289 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8BD SWAP2 SWAP1 PUSH2 0x134A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8D4 JUMPI PUSH2 0x8D3 PUSH2 0x1289 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x968 JUMPI PUSH2 0x967 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x993 SWAP1 PUSH2 0x13AC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x61104DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5B690EC4A06FE979403046EAEEA5B3CE38524683C3001F662C8B5A829632F7DF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA6E JUMPI PUSH2 0xA6D PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA9C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xAB2 SWAP3 SWAP2 SWAP1 PUSH2 0xAC1 JUMP JUMPDEST POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xB3A JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xB39 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xAE1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB47 SWAP2 SWAP1 PUSH2 0xB4B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB64 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB4C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB7B DUP2 PUSH2 0xB68 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB96 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB72 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB9 DUP2 PUSH2 0xB68 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD6 DUP2 PUSH2 0xBB0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xC2A DUP3 PUSH2 0xBE1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xC49 JUMPI PUSH2 0xC48 PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC5C PUSH2 0xB9C JUMP JUMPDEST SWAP1 POP PUSH2 0xC68 DUP3 DUP3 PUSH2 0xC21 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC88 JUMPI PUSH2 0xC87 PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCB1 PUSH2 0xCAC DUP5 PUSH2 0xC6D JUMP JUMPDEST PUSH2 0xC52 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xCD4 JUMPI PUSH2 0xCD3 PUSH2 0xC99 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCFD JUMPI DUP1 PUSH2 0xCE9 DUP9 DUP3 PUSH2 0xBC7 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCD6 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD1C JUMPI PUSH2 0xD1B PUSH2 0xBDC JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD2C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xC9E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4C JUMPI PUSH2 0xD4B PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD5A DUP6 DUP3 DUP7 ADD PUSH2 0xBC7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD7B JUMPI PUSH2 0xD7A PUSH2 0xBAB JUMP JUMPDEST JUMPDEST PUSH2 0xD87 DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xDAC JUMPI PUSH2 0xDAB PUSH2 0xBDC JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDC9 JUMPI PUSH2 0xDC8 PUSH2 0xD91 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xDE5 JUMPI PUSH2 0xDE4 PUSH2 0xC99 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE03 JUMPI PUSH2 0xE02 PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE21 JUMPI PUSH2 0xE20 PUSH2 0xBAB JUMP JUMPDEST JUMPDEST PUSH2 0xE2D DUP6 DUP3 DUP7 ADD PUSH2 0xD96 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE4F JUMPI PUSH2 0xE4E PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE5D DUP5 DUP3 DUP6 ADD PUSH2 0xBC7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE91 DUP3 PUSH2 0xE66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEA1 DUP2 PUSH2 0xE86 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEBC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE98 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xF02 JUMPI PUSH2 0xF01 PUSH2 0xEC2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0xF13 DUP3 PUSH2 0xEF1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF23 DUP3 PUSH2 0xF05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF33 DUP2 PUSH2 0xF18 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF4E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0xBF2 JUMP JUMPDEST JUMPDEST PUSH2 0xF7D DUP3 PUSH2 0xBE1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFAC PUSH2 0xFA7 DUP5 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xC52 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xFC8 JUMPI PUSH2 0xFC7 PUSH2 0xF54 JUMP JUMPDEST JUMPDEST PUSH2 0xFD3 DUP5 DUP3 DUP6 PUSH2 0xF8A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFF0 JUMPI PUSH2 0xFEF PUSH2 0xBDC JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1000 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101F JUMPI PUSH2 0x101E PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x103D JUMPI PUSH2 0x103C PUSH2 0xBAB JUMP JUMPDEST JUMPDEST PUSH2 0x1049 DUP5 DUP3 DUP6 ADD PUSH2 0xFDB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1067 DUP2 PUSH2 0x1052 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10A7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x108C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BE DUP3 PUSH2 0x106D JUMP JUMPDEST PUSH2 0x10C8 DUP2 DUP6 PUSH2 0x1078 JUMP JUMPDEST SWAP4 POP PUSH2 0x10D8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1089 JUMP JUMPDEST PUSH2 0x10E1 DUP2 PUSH2 0xBE1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1101 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x105E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1113 DUP2 DUP5 PUSH2 0x10B3 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1131 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xE98 JUMP JUMPDEST PUSH2 0x113E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE98 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x115A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x1167 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x1174 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xB72 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x118F DUP2 PUSH2 0x117C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11B2 DUP2 PUSH2 0x1195 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11CF DUP2 PUSH2 0x11B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11EE DUP2 PUSH2 0x11D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1209 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x1186 JUMP JUMPDEST PUSH2 0x1216 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x11A9 JUMP JUMPDEST PUSH2 0x1223 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x11C6 JUMP JUMPDEST PUSH2 0x1230 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x11E5 JUMP JUMPDEST PUSH2 0x123D PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x11E5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1256 DUP2 PUSH2 0xBB0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1272 JUMPI PUSH2 0x1271 PUSH2 0xBA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1280 DUP5 DUP3 DUP6 ADD PUSH2 0x1247 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12F2 DUP3 PUSH2 0xB68 JUMP JUMPDEST SWAP2 POP PUSH2 0x12FD DUP4 PUSH2 0xB68 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1315 JUMPI PUSH2 0x1314 PUSH2 0x12B8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1355 DUP3 PUSH2 0xB68 JUMP JUMPDEST SWAP2 POP PUSH2 0x1360 DUP4 PUSH2 0xB68 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1370 JUMPI PUSH2 0x136F PUSH2 0x131B JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1396 PUSH1 0x0 DUP4 PUSH2 0x137B JUMP JUMPDEST SWAP2 POP PUSH2 0x13A1 DUP3 PUSH2 0x1386 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B7 DUP3 PUSH2 0x1389 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE SWAP10 CALLVALUE PUSH16 0x731001178C7E43B0A05A40C69A039070 0xC3 0xB4 0xC4 PUSH7 0x1F541B396A8283 DELEGATECALL PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"1427:7292:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7794:93;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8409:99:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5603:1201;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7893:105;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8004:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8211:86;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8514:110;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8105:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4445:890;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;8630:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3492:484;;;:::i;:::-;;8303:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7794:93;7841:7;7867:13;7860:20;;7794:93;:::o;6618:256:0:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;8409:99:3:-;8460:7;8486:15;;8479:22;;8409:99;:::o;5603:1201::-;5678:17;5701:15;;;;;;;;;;;;;:11;:15::i;:::-;5677:39;;;5765:12;5760:203;;5842:21;5881:9;:16;;;;5923:14;;;;;;;;;;;5915:23;;;;;;;;:::i;:::-;;5800:152;;;;;;;;;;;;;:::i;:::-;;;;;;;;5760:203;5990:24;5973:14;;:41;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;6054:17;6074:16;:35;;;6123:9;6251:16;2160:1;6488:18;2252:1;6074:602;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6054:622;;6714:9;6691:33;;;;;;;;;;5667:1137;;5603:1201;;:::o;7893:105::-;7949:7;7975:9;7985:5;7975:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7968:23;;7893:105;;;:::o;8004:95::-;8052:7;8078:14;;;;;;;;;;;8071:21;;8004:95;:::o;8211:86::-;8255:7;2252:1;8274:16;;;;8211:86;:::o;8514:110::-;8570:7;2160:1;8589:28;;;;8514:110;:::o;8105:100::-;8153:12;8184:14;;;;;;;;;;;8177:21;;8105:100;:::o;4445:890::-;4559:17;4578:12;4680:11;4716:14;;;;;;;;;;;4695:35;;;;;;;;:::i;:::-;;:17;:35;;;;;;;;:::i;:::-;;;4680:51;;4866:15;4923:10;;4904:15;;4886;:33;;;;:::i;:::-;4885:48;4866:68;;5021:15;5059:1;5040:9;:16;;;;:20;5021:40;;5126:15;5169:1;5145:21;:25;5126:45;;5279:6;:20;;;;;5289:10;5279:20;:34;;;;;5303:10;5279:34;:48;;;;;5317:10;5279:48;5263:65;;4612:723;;;;4445:890;;;:::o;8630:87::-;8674:7;8700:10;;8693:17;;8630:87;:::o;3492:484::-;3637:13;3625:9;:25;3621:93;;;3673:30;;;;;;;;;;;;;;3621:93;3745:17;3727:35;;;;;;;;:::i;:::-;;:14;;;;;;;;;;;:35;;;;;;;;:::i;:::-;;;3723:91;;3785:18;;;;;;;;;;;;;;3723:91;3823:9;3846:10;3823:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3958:10;3945:24;;;;;;;;;;;;3492:484::o;8303:100::-;8354:7;8380:9;:16;;;;8373:23;;8303:100;:::o;6935:824::-;7068:21;7109:9;:16;;;;7092:11;7104:1;7092:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;7068:57;;7135:28;7166:9;7176:13;7166:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7135:55;;7217:12;7200:14;;:29;;;;;;;;;;;;;;;;;;7256:17;7239:14;;:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;7370:12;7388;:17;;7413:21;7388:51;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7369:70;;;7454:7;7449:77;;7484:31;;;;;;;;;;;;;;7449:77;7610:12;7597:26;;;;;;;;;;;;7707:1;7685:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7673:9;:36;;;;;;;;;;;;:::i;:::-;;7737:15;7719;:33;;;;7058:701;;;6935:824;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:77:4:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:75::-;475:6;508:2;502:9;492:19;;442:75;:::o;523:117::-;632:1;629;622:12;646:117;755:1;752;745:12;769:122;842:24;860:5;842:24;:::i;:::-;835:5;832:35;822:63;;881:1;878;871:12;822:63;769:122;:::o;897:139::-;943:5;981:6;968:20;959:29;;997:33;1024:5;997:33;:::i;:::-;897:139;;;;:::o;1042:117::-;1151:1;1148;1141:12;1165:102;1206:6;1257:2;1253:7;1248:2;1241:5;1237:14;1233:28;1223:38;;1165:102;;;:::o;1273:180::-;1321:77;1318:1;1311:88;1418:4;1415:1;1408:15;1442:4;1439:1;1432:15;1459:281;1542:27;1564:4;1542:27;:::i;:::-;1534:6;1530:40;1672:6;1660:10;1657:22;1636:18;1624:10;1621:34;1618:62;1615:88;;;1683:18;;:::i;:::-;1615:88;1723:10;1719:2;1712:22;1502:238;1459:281;;:::o;1746:129::-;1780:6;1807:20;;:::i;:::-;1797:30;;1836:33;1864:4;1856:6;1836:33;:::i;:::-;1746:129;;;:::o;1881:311::-;1958:4;2048:18;2040:6;2037:30;2034:56;;;2070:18;;:::i;:::-;2034:56;2120:4;2112:6;2108:17;2100:25;;2180:4;2174;2170:15;2162:23;;1881:311;;;:::o;2198:117::-;2307:1;2304;2297:12;2338:710;2434:5;2459:81;2475:64;2532:6;2475:64;:::i;:::-;2459:81;:::i;:::-;2450:90;;2560:5;2589:6;2582:5;2575:21;2623:4;2616:5;2612:16;2605:23;;2676:4;2668:6;2664:17;2656:6;2652:30;2705:3;2697:6;2694:15;2691:122;;;2724:79;;:::i;:::-;2691:122;2839:6;2822:220;2856:6;2851:3;2848:15;2822:220;;;2931:3;2960:37;2993:3;2981:10;2960:37;:::i;:::-;2955:3;2948:50;3027:4;3022:3;3018:14;3011:21;;2898:144;2882:4;2877:3;2873:14;2866:21;;2822:220;;;2826:21;2440:608;;2338:710;;;;;:::o;3071:370::-;3142:5;3191:3;3184:4;3176:6;3172:17;3168:27;3158:122;;3199:79;;:::i;:::-;3158:122;3316:6;3303:20;3341:94;3431:3;3423:6;3416:4;3408:6;3404:17;3341:94;:::i;:::-;3332:103;;3148:293;3071:370;;;;:::o;3447:684::-;3540:6;3548;3597:2;3585:9;3576:7;3572:23;3568:32;3565:119;;;3603:79;;:::i;:::-;3565:119;3723:1;3748:53;3793:7;3784:6;3773:9;3769:22;3748:53;:::i;:::-;3738:63;;3694:117;3878:2;3867:9;3863:18;3850:32;3909:18;3901:6;3898:30;3895:117;;;3931:79;;:::i;:::-;3895:117;4036:78;4106:7;4097:6;4086:9;4082:22;4036:78;:::i;:::-;4026:88;;3821:303;3447:684;;;;;:::o;4137:117::-;4246:1;4243;4236:12;4273:552;4330:8;4340:6;4390:3;4383:4;4375:6;4371:17;4367:27;4357:122;;4398:79;;:::i;:::-;4357:122;4511:6;4498:20;4488:30;;4541:18;4533:6;4530:30;4527:117;;;4563:79;;:::i;:::-;4527:117;4677:4;4669:6;4665:17;4653:29;;4731:3;4723:4;4715:6;4711:17;4701:8;4697:32;4694:41;4691:128;;;4738:79;;:::i;:::-;4691:128;4273:552;;;;;:::o;4831:527::-;4901:6;4909;4958:2;4946:9;4937:7;4933:23;4929:32;4926:119;;;4964:79;;:::i;:::-;4926:119;5112:1;5101:9;5097:17;5084:31;5142:18;5134:6;5131:30;5128:117;;;5164:79;;:::i;:::-;5128:117;5277:64;5333:7;5324:6;5313:9;5309:22;5277:64;:::i;:::-;5259:82;;;;5055:296;4831:527;;;;;:::o;5364:329::-;5423:6;5472:2;5460:9;5451:7;5447:23;5443:32;5440:119;;;5478:79;;:::i;:::-;5440:119;5598:1;5623:53;5668:7;5659:6;5648:9;5644:22;5623:53;:::i;:::-;5613:63;;5569:117;5364:329;;;;:::o;5699:126::-;5736:7;5776:42;5769:5;5765:54;5754:65;;5699:126;;;:::o;5831:96::-;5868:7;5897:24;5915:5;5897:24;:::i;:::-;5886:35;;5831:96;;;:::o;5933:118::-;6020:24;6038:5;6020:24;:::i;:::-;6015:3;6008:37;5933:118;;:::o;6057:222::-;6150:4;6188:2;6177:9;6173:18;6165:26;;6201:71;6269:1;6258:9;6254:17;6245:6;6201:71;:::i;:::-;6057:222;;;;:::o;6285:180::-;6333:77;6330:1;6323:88;6430:4;6427:1;6420:15;6454:4;6451:1;6444:15;6471:121;6560:1;6553:5;6550:12;6540:46;;6566:18;;:::i;:::-;6540:46;6471:121;:::o;6598:143::-;6651:7;6680:5;6669:16;;6686:49;6729:5;6686:49;:::i;:::-;6598:143;;;:::o;6747:::-;6811:9;6844:40;6878:5;6844:40;:::i;:::-;6831:53;;6747:143;;;:::o;6896:159::-;6997:51;7042:5;6997:51;:::i;:::-;6992:3;6985:64;6896:159;;:::o;7061:250::-;7168:4;7206:2;7195:9;7191:18;7183:26;;7219:85;7301:1;7290:9;7286:17;7277:6;7219:85;:::i;:::-;7061:250;;;;:::o;7317:117::-;7426:1;7423;7416:12;7440:307;7501:4;7591:18;7583:6;7580:30;7577:56;;;7613:18;;:::i;:::-;7577:56;7651:29;7673:6;7651:29;:::i;:::-;7643:37;;7735:4;7729;7725:15;7717:23;;7440:307;;;:::o;7753:146::-;7850:6;7845:3;7840;7827:30;7891:1;7882:6;7877:3;7873:16;7866:27;7753:146;;;:::o;7905:423::-;7982:5;8007:65;8023:48;8064:6;8023:48;:::i;:::-;8007:65;:::i;:::-;7998:74;;8095:6;8088:5;8081:21;8133:4;8126:5;8122:16;8171:3;8162:6;8157:3;8153:16;8150:25;8147:112;;;8178:79;;:::i;:::-;8147:112;8268:54;8315:6;8310:3;8305;8268:54;:::i;:::-;7988:340;7905:423;;;;;:::o;8347:338::-;8402:5;8451:3;8444:4;8436:6;8432:17;8428:27;8418:122;;8459:79;;:::i;:::-;8418:122;8576:6;8563:20;8601:78;8675:3;8667:6;8660:4;8652:6;8648:17;8601:78;:::i;:::-;8592:87;;8408:277;8347:338;;;;:::o;8691:507::-;8759:6;8808:2;8796:9;8787:7;8783:23;8779:32;8776:119;;;8814:79;;:::i;:::-;8776:119;8962:1;8951:9;8947:17;8934:31;8992:18;8984:6;8981:30;8978:117;;;9014:79;;:::i;:::-;8978:117;9119:62;9173:7;9164:6;9153:9;9149:22;9119:62;:::i;:::-;9109:72;;8905:286;8691:507;;;;:::o;9204:90::-;9238:7;9281:5;9274:13;9267:21;9256:32;;9204:90;;;:::o;9300:109::-;9381:21;9396:5;9381:21;:::i;:::-;9376:3;9369:34;9300:109;;:::o;9415:98::-;9466:6;9500:5;9494:12;9484:22;;9415:98;;;:::o;9519:168::-;9602:11;9636:6;9631:3;9624:19;9676:4;9671:3;9667:14;9652:29;;9519:168;;;;:::o;9693:246::-;9774:1;9784:113;9798:6;9795:1;9792:13;9784:113;;;9883:1;9878:3;9874:11;9868:18;9864:1;9859:3;9855:11;9848:39;9820:2;9817:1;9813:10;9808:15;;9784:113;;;9931:1;9922:6;9917:3;9913:16;9906:27;9755:184;9693:246;;;:::o;9945:373::-;10031:3;10059:38;10091:5;10059:38;:::i;:::-;10113:70;10176:6;10171:3;10113:70;:::i;:::-;10106:77;;10192:65;10250:6;10245:3;10238:4;10231:5;10227:16;10192:65;:::i;:::-;10282:29;10304:6;10282:29;:::i;:::-;10277:3;10273:39;10266:46;;10035:283;9945:373;;;;:::o;10324:407::-;10457:4;10495:2;10484:9;10480:18;10472:26;;10508:65;10570:1;10559:9;10555:17;10546:6;10508:65;:::i;:::-;10620:9;10614:4;10610:20;10605:2;10594:9;10590:18;10583:48;10648:76;10719:4;10710:6;10648:76;:::i;:::-;10640:84;;10324:407;;;;;:::o;10737:332::-;10858:4;10896:2;10885:9;10881:18;10873:26;;10909:71;10977:1;10966:9;10962:17;10953:6;10909:71;:::i;:::-;10990:72;11058:2;11047:9;11043:18;11034:6;10990:72;:::i;:::-;10737:332;;;;;:::o;11075:442::-;11224:4;11262:2;11251:9;11247:18;11239:26;;11275:71;11343:1;11332:9;11328:17;11319:6;11275:71;:::i;:::-;11356:72;11424:2;11413:9;11409:18;11400:6;11356:72;:::i;:::-;11438;11506:2;11495:9;11491:18;11482:6;11438:72;:::i;:::-;11075:442;;;;;;:::o;11523:77::-;11560:7;11589:5;11578:16;;11523:77;;;:::o;11606:118::-;11693:24;11711:5;11693:24;:::i;:::-;11688:3;11681:37;11606:118;;:::o;11730:101::-;11766:7;11806:18;11799:5;11795:30;11784:41;;11730:101;;;:::o;11837:115::-;11922:23;11939:5;11922:23;:::i;:::-;11917:3;11910:36;11837:115;;:::o;11958:89::-;11994:7;12034:6;12027:5;12023:18;12012:29;;11958:89;;;:::o;12053:115::-;12138:23;12155:5;12138:23;:::i;:::-;12133:3;12126:36;12053:115;;:::o;12174:93::-;12210:7;12250:10;12243:5;12239:22;12228:33;;12174:93;;;:::o;12273:115::-;12358:23;12375:5;12358:23;:::i;:::-;12353:3;12346:36;12273:115;;:::o;12394:648::-;12591:4;12629:3;12618:9;12614:19;12606:27;;12643:71;12711:1;12700:9;12696:17;12687:6;12643:71;:::i;:::-;12724:70;12790:2;12779:9;12775:18;12766:6;12724:70;:::i;:::-;12804;12870:2;12859:9;12855:18;12846:6;12804:70;:::i;:::-;12884;12950:2;12939:9;12935:18;12926:6;12884:70;:::i;:::-;12964:71;13030:3;13019:9;13015:19;13006:6;12964:71;:::i;:::-;12394:648;;;;;;;;:::o;13048:143::-;13105:5;13136:6;13130:13;13121:22;;13152:33;13179:5;13152:33;:::i;:::-;13048:143;;;;:::o;13197:351::-;13267:6;13316:2;13304:9;13295:7;13291:23;13287:32;13284:119;;;13322:79;;:::i;:::-;13284:119;13442:1;13467:64;13523:7;13514:6;13503:9;13499:22;13467:64;:::i;:::-;13457:74;;13413:128;13197:351;;;;:::o;13554:180::-;13602:77;13599:1;13592:88;13699:4;13696:1;13689:15;13723:4;13720:1;13713:15;13740:180;13788:77;13785:1;13778:88;13885:4;13882:1;13875:15;13909:4;13906:1;13899:15;13926:194;13966:4;13986:20;14004:1;13986:20;:::i;:::-;13981:25;;14020:20;14038:1;14020:20;:::i;:::-;14015:25;;14064:1;14061;14057:9;14049:17;;14088:1;14082:4;14079:11;14076:37;;;14093:18;;:::i;:::-;14076:37;13926:194;;;;:::o;14126:180::-;14174:77;14171:1;14164:88;14271:4;14268:1;14261:15;14295:4;14292:1;14285:15;14312:176;14344:1;14361:20;14379:1;14361:20;:::i;:::-;14356:25;;14395:20;14413:1;14395:20;:::i;:::-;14390:25;;14434:1;14424:35;;14439:18;;:::i;:::-;14424:35;14480:1;14477;14473:9;14468:14;;14312:176;;;;:::o;14494:147::-;14595:11;14632:3;14617:18;;14494:147;;;;:::o;14647:114::-;;:::o;14767:398::-;14926:3;14947:83;15028:1;15023:3;14947:83;:::i;:::-;14940:90;;15039:93;15128:3;15039:93;:::i;:::-;15157:1;15152:3;15148:11;15141:18;;14767:398;;;:::o;15171:379::-;15355:3;15377:147;15520:3;15377:147;:::i;:::-;15370:154;;15541:3;15534:10;;15171:379;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1022200","executionCost":"infinite","totalCost":"infinite"},"external":{"checkUpkeep(bytes)":"infinite","enterLottery()":"infinite","getEntranceFee()":"infinite","getInterval()":"2481","getLatestTimeStamp()":"2482","getLotteryState()":"2685","getNumWords()":"366","getNumberOfPlayers()":"2533","getPlayers(uint256)":"5056","getRecentWinner()":"2633","getRequestConfirmations()":"388","performUpkeep(bytes)":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterLottery()":"c1af5785","getEntranceFee()":"09bc33a7","getInterval()":"91ad27b4","getLatestTimeStamp()":"320229eb","getLotteryState()":"6b68c03c","getNumWords()":"53a2c19a","getNumberOfPlayers()":"fd6673f5","getPlayers(uint256)":"460e2049","getRecentWinner()":"473f1ddc","getRequestConfirmations()":"5f1b0fd8","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__WinnerTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery_checkUpKeepfalse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jatin Kalra\",\"details\":\"This implements Chainlink VRF V2 & Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is a function that Chainlink Keepers nodes call They look for the `upkeepNeeded` to return true The following should be true in order to return true: i. Our time internal should have passed ii. The lottery should have atleast 1 player, and have some ETH iii. Our subscription is funded with LINK iv. The lottery should be in an \\\"open\\\" state.\"}},\"title\":\"A sample lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A contract for creating an untamperable decentralised smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// Objective:\\n// 1. Enter the lottery (paying some amount)\\n// 2. Pick a random winner (verifiably random) (Winner to be selected once a parameter is satisfied. Eg: time, asset price, money in liquidity pool etc)\\n// 3. Completely automated:\\n//  * The following should be true in order to return true:\\n//  * i. Our time internal should have passed\\n//  * ii. The lottery should have atleast 1 player, and have some ETH\\n//  * iii. Our subscription is funded with LINK\\n//  * iv. The lottery should be in an \\\"open\\\" state.\\n\\n// As we are picking random winner (2) and we have some event driven execution (3), we will use Chainlink Oracles\\n// Aka Chainlink Oracles for Randomness and Automated Execution (ie Chainlink Keepers)\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Lottery__NotEnoughETHEntered();\\nerror Lottery__WinnerTransferFailed();\\nerror Lottery__NotOpen();\\nerror Lottery_checkUpKeepfalse(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 lotteryState\\n);\\n\\n/**\\n * @title A sample lottery contract\\n * @author Jatin Kalra\\n * @notice A contract for creating an untamperable decentralised smart contract\\n * @dev This implements Chainlink VRF V2 & Chainlink Keepers\\n */\\n\\ncontract Lottery is\\n    VRFConsumerBaseV2 /* Inheritance for overriding the internal function from \\\"./node_modules\\\" */,\\n    KeeperCompatibleInterface\\n{\\n    // Type Declaration\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    } // in background: uint256 0 = OPEN, 1 = CALCULATING\\n\\n    // State Variables\\n    uint256 private immutable i_entranceFee; // minimum price // A storage var\\n    address payable[] private s_players; // payable addresses as if one of them wins, we would be paying them\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // this is a contract\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables (new section for state variables)\\n    address private s_recentWinner;\\n    LotteryState private s_lotteryState; // To keep track of contract status (OPEN, CALCULATING) // Other method: uint256 private s_state;\\n    uint256 private s_lastTimeStamp; // To keep track of block.timestamps\\n    uint256 private i_interval; // interval between each winner\\n\\n    // Events\\n    event LotteryEnter(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    // Functions\\n    constructor(\\n        address vrfCoordinatorV2, // contract address\\n        uint256 entranceFee,\\n        bytes32 gasLane /* or keyHash */,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    // Objective (1/3: Enter the lottery)\\n    function enterLottery() public payable {\\n        // Other method: require (msg.value > i_entranceFee, \\\"Not Enough ETH!\\\")\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughETHEntered();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n\\n        // Emit an Event whenever we update a dynamic array or mapping\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    // Objective (3/3: Completely automated)\\n\\n    /**\\n     * @dev This is a function that Chainlink Keepers nodes call\\n     * They look for the `upkeepNeeded` to return true\\n     * The following should be true in order to return true:\\n     * i. Our time internal should have passed\\n     * ii. The lottery should have atleast 1 player, and have some ETH\\n     * iii. Our subscription is funded with LINK\\n     * iv. The lottery should be in an \\\"open\\\" state.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\n    {\\n        //  iv. The lottery should be in an \\\"open\\\" state.\\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\\n\\n        // i. Our time internal should have passed (ie: (current block.timestamp - last block.timestamp) > winner interval)\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n\\n        //  ii. The lottery should have atleast 1 player, and have some ETH\\n        bool hasPlayers = (s_players.length > 0);\\n\\n        //  iii. Our subscription is funded with LINK\\n        bool hasBalance = (address(this).balance > 0);\\n\\n        // Checking if all booleans are true or not, in order to restart lottery\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    // Objective (2/3: Pick a random winner)\\n    // To pick a random number, a 2 transaction process: Request a random number (1/2); Once requested, do something with it (2/2)\\n    // Request a random number (1/2)\\n    // function requestRandomWinner() external {\\n    function performUpkeep(bytes calldata /*performData*/) external {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\"); // checking if heckUpKeep is true\\n        if (!upkeepNeeded) {\\n            revert Lottery_checkUpKeepfalse(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n\\n        s_lotteryState = LotteryState.CALCULATING; // Updating status using enum\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // aka keyHash; aka max gas price you are willing to pay for a request in wei; aka setting a gas ceiling\\n            i_subscriptionId, // aka a uint64 subscription ID that this contract uses for funding requests\\n            REQUEST_CONFIRMATIONS, // A uint16 which says how many confirmations the chainlink node should wait before responding\\n            i_callbackGasLimit, // A uint32 which sets gas limit for callback request aka `fulfillRandomWords()`\\n            NUM_WORDS // a uint32 about how many random number we want to get\\n        );\\n        emit RequestedLotteryWinner(requestId);  // This emit is redundant as its already coded in vrfcoordinatorv2mock\\n\\n    }\\n\\n    // Once requested, do something with it (2/2); Here: Pick a random winner from the player's array and send him the money\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_lotteryState = LotteryState.OPEN; // Changing status to open after winner selection\\n\\n        // Sending money to winner\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__WinnerTransferFailed();\\n        } // error report\\n        // Keeping a list of all winners\\n        emit WinnerPicked(recentWinner);\\n\\n        // Resetting array & timestamp\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    // View & Pure Functions\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x6810e7b9883a4f0758ddd133c593f9a2bfbaaa748b3cf2eb924ab69ad9cd8f02\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":197,"contract":"contracts/lottery.sol:Lottery","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":214,"contract":"contracts/lottery.sol:Lottery","label":"s_recentWinner","offset":0,"slot":"1","type":"t_address"},{"astId":217,"contract":"contracts/lottery.sol:Lottery","label":"s_lotteryState","offset":20,"slot":"1","type":"t_enum(LotteryState)192"},{"astId":219,"contract":"contracts/lottery.sol:Lottery","label":"s_lastTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":221,"contract":"contracts/lottery.sol:Lottery","label":"i_interval","offset":0,"slot":"3","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(LotteryState)192":{"encoding":"inplace","label":"enum Lottery.LotteryState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"A contract for creating an untamperable decentralised smart contract","version":1}}}}}}