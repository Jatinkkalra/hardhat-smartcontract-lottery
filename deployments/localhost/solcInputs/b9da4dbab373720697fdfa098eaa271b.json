{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\n// Objective:\r\n// 1. Enter the lottery (paying some amount)\r\n// 2. Pick a random winner (verifiably random) (Winner to be selected once a parameter is satisfied. Eg: time, asset price, money in liquidity pool etc)\r\n// 3. Completely automated winner selection:\r\n//  * The following should be true in order to return true:\r\n//  * i. Our time internal should have passed\r\n//  * ii. The lottery should have atleast 1 player, and have some ETH\r\n//  * iii. Our subscription is funded with LINK\r\n//  * iv. The lottery should be in an \"open\" state.\r\n\r\n// As we are picking random winner (2) and we have some event driven execution (3), we will use Chainlink Oracles\r\n// Aka Chainlink Oracles for Randomness and Automated Execution (ie Chainlink Keepers)\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\"; // for checkUpkeep and performUpkeep\r\n\r\nerror Lottery__NotEnoughETHEntered();\r\nerror Lottery__WinnerTransferFailed();\r\nerror Lottery__NotOpen();\r\nerror Lottery__checkUpkeepFalse(\r\n  uint256 currentBalance,\r\n  uint256 numPlayers,\r\n  uint256 lotteryState,\r\n  uint256 interval\r\n);\r\n\r\n/**\r\n * @title A sample lottery contract\r\n * @author Jatin Kalra\r\n * @notice A contract for creating an untamperable decentralised smart contract\r\n * @dev This implements Chainlink VRF V2 & Chainlink Keepers\r\n */\r\n\r\ncontract Lottery is\r\n  VRFConsumerBaseV2 /* Inheritance to override the fullfillRandomWords internal function from \"./node_modules\" */,\r\n  KeeperCompatibleInterface /* for checkUpkeep and performUpkeep functions */\r\n{\r\n  // Type Declaration\r\n  enum LotteryState {\r\n    OPEN,\r\n    CALCULATING\r\n  } // in background (indexed): uint256 0 = OPEN, 1 = CALCULATING\r\n\r\n  // State Variables\r\n  uint256 private immutable i_entranceFee; // minimum price // A storage var\r\n  address payable[] private s_players; // array of addresses entered (1/2) // payable addresses as if one of them wins, we would be paying them\r\n  VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // this is a contract\r\n  bytes32 private immutable i_gasLane;\r\n  uint64 private immutable i_subscriptionId;\r\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\r\n  uint32 private immutable i_callbackGasLimit;\r\n  uint32 private constant NUM_WORDS = 1;\r\n\r\n  // Lottery Variables (new section for state variables)\r\n  address private s_recentWinner;\r\n  LotteryState private s_lotteryState; // To keep track of contract status (OPEN, CALCULATING) // Other method: uint256 private s_state;\r\n  uint256 private s_lastTimeStamp; // To keep track of block.timestamps\r\n  uint256 private immutable i_interval; // interval between each winner\r\n\r\n  // Events\r\n  event LotteryEnter(address indexed player);\r\n  event RequestedLotteryWinner(uint256 indexed requestId);\r\n  event WinnerPicked(address indexed winner);\r\n\r\n  // Functions\r\n  /**\r\n   * @notice Constructs a new Lottery contract with the parameters set here.\r\n   * @param vrfCoordinatorV2 The address of the VRFCoordinatorV2 contract.\r\n   * @param entranceFee The minimum price required to enter the lottery.\r\n   * @param gasLane The unique identifier (keyHash) for the VRF system to generate random numbers. Max gas price.\r\n   * @param subscriptionId The unique subscription ID used for funding VRF requests.\r\n   * @param callbackGasLimit The gas limit for the callback request to fulfill the random number.\r\n   * @param interval The interval between each winner selection.\r\n   */\r\n  constructor(\r\n    address vrfCoordinatorV2, // contract address\r\n    uint256 entranceFee,\r\n    bytes32 gasLane /* or keyHash */,\r\n    uint64 subscriptionId,\r\n    uint32 callbackGasLimit,\r\n    uint256 interval\r\n  ) VRFConsumerBaseV2(vrfCoordinatorV2) {\r\n    i_entranceFee = entranceFee;\r\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // Linking VRF Contract address with Interface(aka functions and events) and assigning it to a variable\r\n    i_gasLane = gasLane;\r\n    i_subscriptionId = subscriptionId;\r\n    i_callbackGasLimit = callbackGasLimit;\r\n    s_lotteryState = LotteryState.OPEN;\r\n    s_lastTimeStamp = block.timestamp;\r\n    i_interval = interval;\r\n  }\r\n\r\n  // Objective (1/3: Enter the lottery)\r\n\r\n  /**\r\n   * @notice Allows a participant to enter the lottery by paying the entrance fee.\r\n   * @dev Participants must send an amount of Ether greater than or equal to the entrance fee.\r\n   * @dev The lottery must be in an \"open\" state to allow entries.\r\n   * @dev Emits the `LotteryEnter` event when a participant successfully enters the lottery.\r\n   * @dev Throws a `Lottery__NotEnoughETHEntered` error if the participant does not send enough Ether.\r\n   * @dev Throws a `Lottery__NotOpen` error if the lottery is not in an \"open\" state.\r\n   */\r\n  function enterLottery() public payable {\r\n    // Other method: require (msg.value > i_entranceFee, \"Not Enough ETH!\") // gas costly as string is stored as error\r\n    // gas efficient mehod below as error code is stored\r\n    if (msg.value < i_entranceFee) {\r\n      revert Lottery__NotEnoughETHEntered();\r\n    }\r\n    if (s_lotteryState != LotteryState.OPEN) {\r\n      revert Lottery__NotOpen();\r\n    }\r\n    s_players.push(payable(msg.sender)); // array of addresses entered (2/2)\r\n\r\n    // Emit an Event whenever we update a dynamic array or mapping; More gas-efficient than storing the variable as thet are stored outside the smart contract\r\n    emit LotteryEnter(msg.sender);\r\n  }\r\n\r\n  // Objective (3/3: Completely automated)\r\n\r\n  /**\r\n   * @notice Checks if it's time to select a new random winner and restart the lottery.\r\n   * @dev This function is called by Chainlink Keepers nodes to determine if the upkeep is true.\r\n   * @dev The following conditions must be true to return `true`:\r\n   *   i. time interval should have passed.\r\n   *   ii. The lottery should have at least 1 player and have some ETH.\r\n   *   iii. Our subscription is funded with LINK.\r\n   *   iv. The lottery should be in an \"open\" state.\r\n   * @dev checkUpkeep and performUpkeep reference: https://docs.chain.link/chainlink-automation/compatible-contracts\r\n   * @return upkeepNeeded True if the conditions for selecting a new random winner are met, false otherwise.\r\n   */\r\n  function checkUpkeep(\r\n    bytes memory /* checkData */\r\n  ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\r\n    // changed from external to public so that performUpkeep can call it to verify\r\n    //  iv. The lottery should be in an \"open\" state.\r\n    bool isOpen = (LotteryState.OPEN == s_lotteryState);\r\n\r\n    // i. Our time internal should have passed (ie: (current block.timestamp - last block.timestamp) > winner interval)\r\n    bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\r\n\r\n    //  ii. The lottery should have atleast 1 player, and have some ETH\r\n    bool hasPlayers = (s_players.length > 0);\r\n    bool hasBalance = (address(this).balance > 0);\r\n\r\n    //  iii. Our subscription is funded with LINK\r\n\r\n    // Checking if all booleans are true or not, in order to restart lottery\r\n    upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\r\n  } // Formating source: https://docs.chain.link/chainlink-automation/compatible-contracts\r\n\r\n  // Objective (2/3: Pick a random winner)\r\n  // To pick a random number, a 2 transaction process: Request a random number (1/2); Once requested, do something with it (2/2)\r\n  // Request a random number (1/2)\r\n\r\n  /**\r\n   * @notice Performs the upkeep and selects a new random winner for the lottery.\r\n   * @dev This function is called by Chainlink Keepers when the conditions for selecting a new winner are met.\r\n   * @dev Throws a `Lottery__checkUpkeepFalse` error if the conditions for selecting a new winner are not met.\r\n   * @dev Emits the `RequestedLotteryWinner` event when a new winner is requested.\r\n   */\r\n  function performUpkeep(bytes calldata /*performData*/) external {\r\n    //external function as it saves gas when called outside of this contract\r\n    (bool upkeepNeeded, ) = checkUpkeep(\"\"); // checking if checkUpKeep is true\r\n    if (!upkeepNeeded) {\r\n      revert Lottery__checkUpkeepFalse(\r\n        address(this).balance,\r\n        s_players.length,\r\n        uint256(s_lotteryState),\r\n        i_interval\r\n      ); // relevant paramaters status to know why it failed\r\n    }\r\n\r\n    s_lotteryState = LotteryState.CALCULATING; // Updating status using enum before requesting the requestId\r\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\r\n      i_gasLane, // aka keyHash; aka max gas price you are willing to pay for a request in wei; aka setting a gas ceiling\r\n      i_subscriptionId, // aka a uint64 subscription ID that this contract uses for funding requests\r\n      REQUEST_CONFIRMATIONS, // A uint16 which says how many confirmations the chainlink node should wait before responding\r\n      i_callbackGasLimit, // A uint32 which sets gas limit for callback request aka `fulfillRandomWords()`\r\n      NUM_WORDS // a uint32 about how many random number we want to get\r\n    ); // requestRandomWords: https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n    emit RequestedLotteryWinner(requestId); // This emit is redundant as its already coded in vrfcoordinatorv2mock\r\n  }\r\n\r\n  // Once requested, do something with it (2/2); Here: Pick a random winner from the player's array and send him the money\r\n  /**\r\n   * @notice Handles the fulfillment of a random number request and selects the winner.\r\n   * @dev This function is called internally when the VRF response is received.\r\n   * @param randomWords An array of random words generated by Chainlink VRF.\r\n   * @dev The function selects a winner by taking the modulus of the first random word with the number of players.\r\n   * @dev Transfers the lottery funds to the winner and emits the `WinnerPicked` event.\r\n   * @dev Resets the player array and the timestamp for the next round of the lottery.\r\n   * @dev Once winner is picked, changes the lottery state to Open.\r\n   */\r\n  function fulfillRandomWords(\r\n    uint256 /* requestId */,\r\n    uint256[] memory randomWords\r\n  ) internal override {\r\n    uint256 indexOfWinner = randomWords[0] % s_players.length; // Index 0 as we are only getting 1 random word from the array of words; % use example: 202 (random number) % 10 (entries) = 2 remainder (winner)\r\n    address payable recentWinner = s_players[indexOfWinner];\r\n    s_recentWinner = recentWinner;\r\n    s_lotteryState = LotteryState.OPEN; // Changing status to open after winner selection\r\n\r\n    // Sending money to winner\r\n    (bool success, ) = recentWinner.call{ value: address(this).balance }(\"\"); // call function syntax: (bool success, bytes memory data) = targetAddress.call{value: amount}(functionSignature);\r\n    // Other method: require(success); Using the below one to be gas-efficient and record errors\r\n    if (!success) {\r\n      revert Lottery__WinnerTransferFailed();\r\n    }\r\n    // Keeping a list of all winners (outside of the contract, in the logs. As there is no array of winners written yet)\r\n    emit WinnerPicked(recentWinner);\r\n\r\n    // Resetting array & timestamp\r\n    s_players = new address payable[](0); // Array of size 0\r\n    s_lastTimeStamp = block.timestamp;\r\n  } // Reference: https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\r\n\r\n  // View & Pure Functions\r\n  function getEntranceFee() public view returns (uint256) {\r\n    return i_entranceFee;\r\n  }\r\n\r\n  function getPlayers(uint256 index) public view returns (address) {\r\n    return s_players[index];\r\n  }\r\n\r\n  function getRecentWinner() public view returns (address) {\r\n    return s_recentWinner;\r\n  }\r\n\r\n  function getLotteryState() public view returns (LotteryState) {\r\n    return s_lotteryState;\r\n  }\r\n\r\n  function getNumWords() public pure returns (uint256) {\r\n    return NUM_WORDS;\r\n  }\r\n\r\n  function getNumberOfPlayers() public view returns (uint256) {\r\n    return s_players.length;\r\n  }\r\n\r\n  function getLatestTimeStamp() public view returns (uint256) {\r\n    return s_lastTimeStamp;\r\n  }\r\n\r\n  function getRequestConfirmations() public pure returns (uint256) {\r\n    return REQUEST_CONFIRMATIONS;\r\n  }\r\n\r\n  function getInterval() public view returns (uint256) {\r\n    return i_interval;\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}