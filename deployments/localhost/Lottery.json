{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__WinnerTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "Lottery__checkUpkeepFalse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb31fc1491fe02de04f0385eef54829ec8a19a2ea2b7b8268932f5947518cd7a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1214030",
    "logsBloom": "0x
    "blockHash": "0x36e6d4829ad9ba7da02d22ab28e5eca688da641cbfb17c1c7274103c6d5b7037",
    "transactionHash": "0xbb31fc1491fe02de04f0385eef54829ec8a19a2ea2b7b8268932f5947518cd7a",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1214030",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "cfed2e55ca7255da1136f6578e713f76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__WinnerTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"Lottery__checkUpkeepFalse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jatin Kalra\",\"details\":\"This implements Chainlink VRF V2 & Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This function is called by Chainlink Keepers nodes to determine if the upkeep is true.The following conditions must be true to return `true`:   i. time interval should have passed.   ii. The lottery should have at least 1 player and have some ETH.   iii. Our subscription is funded with LINK.   iv. The lottery should be in an \\\"open\\\" state.checkUpkeep and performUpkeep reference: https://docs.chain.link/chainlink-automation/compatible-contracts\",\"returns\":{\"upkeepNeeded\":\"True if the conditions for selecting a new random winner are met, false otherwise.\"}},\"constructor\":{\"params\":{\"callbackGasLimit\":\"The gas limit for the callback request to fulfill the random number.\",\"entranceFee\":\"The minimum price required to enter the lottery.\",\"gasLane\":\"The unique identifier (keyHash) for the VRF system to generate random numbers. Max gas price.\",\"interval\":\"The interval between each winner selection.\",\"subscriptionId\":\"The unique subscription ID used for funding VRF requests.\",\"vrfCoordinatorV2\":\"The address of the VRFCoordinatorV2 contract.\"}},\"enterLottery()\":{\"details\":\"Participants must send an amount of Ether greater than or equal to the entrance fee.The lottery must be in an \\\"open\\\" state to allow entries.Emits the `LotteryEnter` event when a participant successfully enters the lottery.Throws a `Lottery__NotEnoughETHEntered` error if the participant does not send enough Ether.Throws a `Lottery__NotOpen` error if the lottery is not in an \\\"open\\\" state.\"},\"performUpkeep(bytes)\":{\"details\":\"This function is called by Chainlink Keepers when the conditions for selecting a new winner are met.Throws a `Lottery__checkUpkeepFalse` error if the conditions for selecting a new winner are not met.Emits the `RequestedLotteryWinner` event when a new winner is requested.\"}},\"title\":\"A sample lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"Checks if it's time to select a new random winner and restart the lottery.\"},\"constructor\":{\"notice\":\"Constructs a new Lottery contract with the parameters set here.\"},\"enterLottery()\":{\"notice\":\"Allows a participant to enter the lottery by paying the entrance fee.\"},\"performUpkeep(bytes)\":{\"notice\":\"Performs the upkeep and selects a new random winner for the lottery.\"}},\"notice\":\"A contract for creating an untamperable decentralised smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// Objective:\\r\\n// 1. Enter the lottery (paying some amount)\\r\\n// 2. Pick a random winner (verifiably random) (Winner to be selected once a parameter is satisfied. Eg: time, asset price, money in liquidity pool etc)\\r\\n// 3. Completely automated winner selection:\\r\\n//  * The following should be true in order to return true:\\r\\n//  * i. Our time internal should have passed\\r\\n//  * ii. The lottery should have atleast 1 player, and have some ETH\\r\\n//  * iii. Our subscription is funded with LINK\\r\\n//  * iv. The lottery should be in an \\\"open\\\" state.\\r\\n\\r\\n// As we are picking random winner (2) and we have some event driven execution (3), we will use Chainlink Oracles\\r\\n// Aka Chainlink Oracles for Randomness and Automated Execution (ie Chainlink Keepers)\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\"; // for checkUpkeep and performUpkeep\\r\\n\\r\\nerror Lottery__NotEnoughETHEntered();\\r\\nerror Lottery__WinnerTransferFailed();\\r\\nerror Lottery__NotOpen();\\r\\nerror Lottery__checkUpkeepFalse(\\r\\n  uint256 currentBalance,\\r\\n  uint256 numPlayers,\\r\\n  uint256 lotteryState,\\r\\n  uint256 interval\\r\\n);\\r\\n\\r\\n/**\\r\\n * @title A sample lottery contract\\r\\n * @author Jatin Kalra\\r\\n * @notice A contract for creating an untamperable decentralised smart contract\\r\\n * @dev This implements Chainlink VRF V2 & Chainlink Keepers\\r\\n */\\r\\n\\r\\ncontract Lottery is\\r\\n  VRFConsumerBaseV2 /* Inheritance to override the fullfillRandomWords internal function from \\\"./node_modules\\\" */,\\r\\n  KeeperCompatibleInterface /* for checkUpkeep and performUpkeep functions */\\r\\n{\\r\\n  // Type Declaration\\r\\n  enum LotteryState {\\r\\n    OPEN,\\r\\n    CALCULATING\\r\\n  } // in background (indexed): uint256 0 = OPEN, 1 = CALCULATING\\r\\n\\r\\n  // State Variables\\r\\n  uint256 private immutable i_entranceFee; // minimum price // A storage var\\r\\n  address payable[] private s_players; // array of addresses entered (1/2) // payable addresses as if one of them wins, we would be paying them\\r\\n  VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // this is a contract\\r\\n  bytes32 private immutable i_gasLane;\\r\\n  uint64 private immutable i_subscriptionId;\\r\\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n  uint32 private immutable i_callbackGasLimit;\\r\\n  uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n  // Lottery Variables (new section for state variables)\\r\\n  address private s_recentWinner;\\r\\n  LotteryState private s_lotteryState; // To keep track of contract status (OPEN, CALCULATING) // Other method: uint256 private s_state;\\r\\n  uint256 private s_lastTimeStamp; // To keep track of block.timestamps\\r\\n  uint256 private immutable i_interval; // interval between each winner\\r\\n\\r\\n  // Events\\r\\n  event LotteryEnter(address indexed player);\\r\\n  event RequestedLotteryWinner(uint256 indexed requestId);\\r\\n  event WinnerPicked(address indexed winner);\\r\\n\\r\\n  // Functions\\r\\n  /**\\r\\n   * @notice Constructs a new Lottery contract with the parameters set here.\\r\\n   * @param vrfCoordinatorV2 The address of the VRFCoordinatorV2 contract.\\r\\n   * @param entranceFee The minimum price required to enter the lottery.\\r\\n   * @param gasLane The unique identifier (keyHash) for the VRF system to generate random numbers. Max gas price.\\r\\n   * @param subscriptionId The unique subscription ID used for funding VRF requests.\\r\\n   * @param callbackGasLimit The gas limit for the callback request to fulfill the random number.\\r\\n   * @param interval The interval between each winner selection.\\r\\n   */\\r\\n  constructor(\\r\\n    address vrfCoordinatorV2, // contract address\\r\\n    uint256 entranceFee,\\r\\n    bytes32 gasLane /* or keyHash */,\\r\\n    uint64 subscriptionId,\\r\\n    uint32 callbackGasLimit,\\r\\n    uint256 interval\\r\\n  ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n    i_entranceFee = entranceFee;\\r\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // Linking VRF Contract address with Interface(aka functions and events) and assigning it to a variable\\r\\n    i_gasLane = gasLane;\\r\\n    i_subscriptionId = subscriptionId;\\r\\n    i_callbackGasLimit = callbackGasLimit;\\r\\n    s_lotteryState = LotteryState.OPEN;\\r\\n    s_lastTimeStamp = block.timestamp;\\r\\n    i_interval = interval;\\r\\n  }\\r\\n\\r\\n  // Objective (1/3: Enter the lottery)\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a participant to enter the lottery by paying the entrance fee.\\r\\n   * @dev Participants must send an amount of Ether greater than or equal to the entrance fee.\\r\\n   * @dev The lottery must be in an \\\"open\\\" state to allow entries.\\r\\n   * @dev Emits the `LotteryEnter` event when a participant successfully enters the lottery.\\r\\n   * @dev Throws a `Lottery__NotEnoughETHEntered` error if the participant does not send enough Ether.\\r\\n   * @dev Throws a `Lottery__NotOpen` error if the lottery is not in an \\\"open\\\" state.\\r\\n   */\\r\\n  function enterLottery() public payable {\\r\\n    // Other method: require (msg.value > i_entranceFee, \\\"Not Enough ETH!\\\") // gas costly as string is stored as error\\r\\n    // gas efficient mehod below as error code is stored\\r\\n    if (msg.value < i_entranceFee) {\\r\\n      revert Lottery__NotEnoughETHEntered();\\r\\n    }\\r\\n    if (s_lotteryState != LotteryState.OPEN) {\\r\\n      revert Lottery__NotOpen();\\r\\n    }\\r\\n    s_players.push(payable(msg.sender)); // array of addresses entered (2/2)\\r\\n\\r\\n    // Emit an Event whenever we update a dynamic array or mapping; More gas-efficient than storing the variable as thet are stored outside the smart contract\\r\\n    emit LotteryEnter(msg.sender);\\r\\n  }\\r\\n\\r\\n  // Objective (3/3: Completely automated)\\r\\n\\r\\n  /**\\r\\n   * @notice Checks if it's time to select a new random winner and restart the lottery.\\r\\n   * @dev This function is called by Chainlink Keepers nodes to determine if the upkeep is true.\\r\\n   * @dev The following conditions must be true to return `true`:\\r\\n   *   i. time interval should have passed.\\r\\n   *   ii. The lottery should have at least 1 player and have some ETH.\\r\\n   *   iii. Our subscription is funded with LINK.\\r\\n   *   iv. The lottery should be in an \\\"open\\\" state.\\r\\n   * @dev checkUpkeep and performUpkeep reference: https://docs.chain.link/chainlink-automation/compatible-contracts\\r\\n   * @return upkeepNeeded True if the conditions for selecting a new random winner are met, false otherwise.\\r\\n   */\\r\\n  function checkUpkeep(\\r\\n    bytes memory /* checkData */\\r\\n  ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\r\\n    // changed from external to public so that performUpkeep can call it to verify\\r\\n    //  iv. The lottery should be in an \\\"open\\\" state.\\r\\n    bool isOpen = (LotteryState.OPEN == s_lotteryState);\\r\\n\\r\\n    // i. Our time internal should have passed (ie: (current block.timestamp - last block.timestamp) > winner interval)\\r\\n    bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n\\r\\n    //  ii. The lottery should have atleast 1 player, and have some ETH\\r\\n    bool hasPlayers = (s_players.length > 0);\\r\\n    bool hasBalance = (address(this).balance > 0);\\r\\n\\r\\n    //  iii. Our subscription is funded with LINK\\r\\n\\r\\n    // Checking if all booleans are true or not, in order to restart lottery\\r\\n    upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n  } // Formating source: https://docs.chain.link/chainlink-automation/compatible-contracts\\r\\n\\r\\n  // Objective (2/3: Pick a random winner)\\r\\n  // To pick a random number, a 2 transaction process: Request a random number (1/2); Once requested, do something with it (2/2)\\r\\n  // Request a random number (1/2)\\r\\n\\r\\n  /**\\r\\n   * @notice Performs the upkeep and selects a new random winner for the lottery.\\r\\n   * @dev This function is called by Chainlink Keepers when the conditions for selecting a new winner are met.\\r\\n   * @dev Throws a `Lottery__checkUpkeepFalse` error if the conditions for selecting a new winner are not met.\\r\\n   * @dev Emits the `RequestedLotteryWinner` event when a new winner is requested.\\r\\n   */\\r\\n  function performUpkeep(bytes calldata /*performData*/) external {\\r\\n    //external function as it saves gas when called outside of this contract\\r\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\"); // checking if checkUpKeep is true\\r\\n    if (!upkeepNeeded) {\\r\\n      revert Lottery__checkUpkeepFalse(\\r\\n        address(this).balance,\\r\\n        s_players.length,\\r\\n        uint256(s_lotteryState),\\r\\n        i_interval\\r\\n      ); // relevant paramaters status to know why it failed\\r\\n    }\\r\\n\\r\\n    s_lotteryState = LotteryState.CALCULATING; // Updating status using enum before requesting the requestId\\r\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n      i_gasLane, // aka keyHash; aka max gas price you are willing to pay for a request in wei; aka setting a gas ceiling\\r\\n      i_subscriptionId, // aka a uint64 subscription ID that this contract uses for funding requests\\r\\n      REQUEST_CONFIRMATIONS, // A uint16 which says how many confirmations the chainlink node should wait before responding\\r\\n      i_callbackGasLimit, // A uint32 which sets gas limit for callback request aka `fulfillRandomWords()`\\r\\n      NUM_WORDS // a uint32 about how many random number we want to get\\r\\n    ); // requestRandomWords: https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\r\\n    emit RequestedLotteryWinner(requestId); // This emit is redundant as its already coded in vrfcoordinatorv2mock\\r\\n  }\\r\\n\\r\\n  // Once requested, do something with it (2/2); Here: Pick a random winner from the player's array and send him the money\\r\\n  /**\\r\\n   * @notice Handles the fulfillment of a random number request and selects the winner.\\r\\n   * @dev This function is called internally when the VRF response is received.\\r\\n   * @param randomWords An array of random words generated by Chainlink VRF.\\r\\n   * @dev The function selects a winner by taking the modulus of the first random word with the number of players.\\r\\n   * @dev Transfers the lottery funds to the winner and emits the `WinnerPicked` event.\\r\\n   * @dev Resets the player array and the timestamp for the next round of the lottery.\\r\\n   * @dev Once winner is picked, changes the lottery state to Open.\\r\\n   */\\r\\n  function fulfillRandomWords(\\r\\n    uint256 /* requestId */,\\r\\n    uint256[] memory randomWords\\r\\n  ) internal override {\\r\\n    uint256 indexOfWinner = randomWords[0] % s_players.length; // Index 0 as we are only getting 1 random word from the array of words; % use example: 202 (random number) % 10 (entries) = 2 remainder (winner)\\r\\n    address payable recentWinner = s_players[indexOfWinner];\\r\\n    s_recentWinner = recentWinner;\\r\\n    s_lotteryState = LotteryState.OPEN; // Changing status to open after winner selection\\r\\n\\r\\n    // Sending money to winner\\r\\n    (bool success, ) = recentWinner.call{ value: address(this).balance }(\\\"\\\"); // call function syntax: (bool success, bytes memory data) = targetAddress.call{value: amount}(functionSignature);\\r\\n    // Other method: require(success); Using the below one to be gas-efficient and record errors\\r\\n    if (!success) {\\r\\n      revert Lottery__WinnerTransferFailed();\\r\\n    }\\r\\n    // Keeping a list of all winners (outside of the contract, in the logs. As there is no array of winners written yet)\\r\\n    emit WinnerPicked(recentWinner);\\r\\n\\r\\n    // Resetting array & timestamp\\r\\n    s_players = new address payable[](0); // Array of size 0\\r\\n    s_lastTimeStamp = block.timestamp;\\r\\n  } // Reference: https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\r\\n\\r\\n  // View & Pure Functions\\r\\n  function getEntranceFee() public view returns (uint256) {\\r\\n    return i_entranceFee;\\r\\n  }\\r\\n\\r\\n  function getPlayers(uint256 index) public view returns (address) {\\r\\n    return s_players[index];\\r\\n  }\\r\\n\\r\\n  function getRecentWinner() public view returns (address) {\\r\\n    return s_recentWinner;\\r\\n  }\\r\\n\\r\\n  function getLotteryState() public view returns (LotteryState) {\\r\\n    return s_lotteryState;\\r\\n  }\\r\\n\\r\\n  function getNumWords() public pure returns (uint256) {\\r\\n    return NUM_WORDS;\\r\\n  }\\r\\n\\r\\n  function getNumberOfPlayers() public view returns (uint256) {\\r\\n    return s_players.length;\\r\\n  }\\r\\n\\r\\n  function getLatestTimeStamp() public view returns (uint256) {\\r\\n    return s_lastTimeStamp;\\r\\n  }\\r\\n\\r\\n  function getRequestConfirmations() public pure returns (uint256) {\\r\\n    return REQUEST_CONFIRMATIONS;\\r\\n  }\\r\\n\\r\\n  function getInterval() public view returns (uint256) {\\r\\n    return i_interval;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x0defcc20a7318e64021e7af956f8239565061fc7b0ba64fd506ac6b57a5db94d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200183938038062001839833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611463620003d660003960008181610435015281816106e1015261074f015260006105410152600061051e015260006104fd015260006104c10152600081816102fa0152610775015260008181610320015261037401526114636000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636e04ff0d116100595780636e04ff0d1461025857806391ad27b414610296578063c1af5785146102c1578063fd6673f5146102cb576100c2565b806353a2c19a146101d75780635f1b0fd8146102025780636b68c03c1461022d576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063460e20491461016f578063473f1ddc146101ac575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bdf565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d93565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610bdf565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e4a565b6103e8565b005b34801561017b57600080fd5b5061019660048036038101906101919190610e97565b6105fa565b6040516101a39190610f05565b60405180910390f35b3480156101b857600080fd5b506101c1610641565b6040516101ce9190610f05565b60405180910390f35b3480156101e357600080fd5b506101ec61066b565b6040516101f99190610bdf565b60405180910390f35b34801561020e57600080fd5b5061021761067a565b6040516102249190610bdf565b60405180910390f35b34801561023957600080fd5b50610242610687565b60405161024f9190610f97565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a9190611067565b61069e565b60405161028d92919061114a565b60405180910390f35b3480156102a257600080fd5b506102ab61074b565b6040516102b89190610bdf565b60405180910390f35b6102c9610773565b005b3480156102d757600080fd5b506102e06108e2565b6040516102ed9190610bdf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061117a565b60405180910390fd5b6103da82826108ee565b5050565b6000600254905090565b60006104026040518060200160405280600081525061069e565b509050806104935747600080549050600160149054906101000a900460ff16600181111561043357610432610f20565b5b7f00000000000000000000000000000000000000000000000000000000000000006040517f09e1012e00000000000000000000000000000000000000000000000000000000815260040161048a94939291906111a3565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104b8576104b7610f20565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610582959493929190611260565b6020604051808303816000875af11580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c591906112c8565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b600080828154811061060f5761060e6112f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106c6576106c5610f20565b5b600060018111156106da576106d9610f20565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070e9190611353565b1190506000806000805490501190506000804711905083801561072e5750825b80156107375750815b80156107405750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107cd576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107e1576107e0610f20565b5b600160149054906101000a900460ff16600181111561080357610802610f20565b5b1461083a576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008080549050905090565b6000808054905082600081518110610909576109086112f5565b5b602002602001015161091b91906113b6565b90506000808281548110610932576109316112f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109c6576109c5610f20565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109f190611418565b60006040518083038185875af1925050503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b5050905080610a6e576040517f061104de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610acc57610acb610c50565b5b604051908082528060200260200182016040528015610afa5781602001602082028036833780820191505090505b5060009080519060200190610b10929190610b1f565b50426002819055505050505050565b828054828255906000526020600020908101928215610b98579160200282015b82811115610b975782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3f565b5b509050610ba59190610ba9565b5090565b5b80821115610bc2576000816000905550600101610baa565b5090565b6000819050919050565b610bd981610bc6565b82525050565b6000602082019050610bf46000830184610bd0565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1781610bc6565b8114610c2257600080fd5b50565b600081359050610c3481610c0e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8882610c3f565b810181811067ffffffffffffffff82111715610ca757610ca6610c50565b5b80604052505050565b6000610cba610bfa565b9050610cc68282610c7f565b919050565b600067ffffffffffffffff821115610ce657610ce5610c50565b5b602082029050602081019050919050565b600080fd5b6000610d0f610d0a84610ccb565b610cb0565b90508083825260208201905060208402830185811115610d3257610d31610cf7565b5b835b81811015610d5b5780610d478882610c25565b845260208401935050602081019050610d34565b5050509392505050565b600082601f830112610d7a57610d79610c3a565b5b8135610d8a848260208601610cfc565b91505092915050565b60008060408385031215610daa57610da9610c04565b5b6000610db885828601610c25565b925050602083013567ffffffffffffffff811115610dd957610dd8610c09565b5b610de585828601610d65565b9150509250929050565b600080fd5b60008083601f840112610e0a57610e09610c3a565b5b8235905067ffffffffffffffff811115610e2757610e26610def565b5b602083019150836001820283011115610e4357610e42610cf7565b5b9250929050565b60008060208385031215610e6157610e60610c04565b5b600083013567ffffffffffffffff811115610e7f57610e7e610c09565b5b610e8b85828601610df4565b92509250509250929050565b600060208284031215610ead57610eac610c04565b5b6000610ebb84828501610c25565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eef82610ec4565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f6057610f5f610f20565b5b50565b6000819050610f7182610f4f565b919050565b6000610f8182610f63565b9050919050565b610f9181610f76565b82525050565b6000602082019050610fac6000830184610f88565b92915050565b600080fd5b600067ffffffffffffffff821115610fd257610fd1610c50565b5b610fdb82610c3f565b9050602081019050919050565b82818337600083830152505050565b600061100a61100584610fb7565b610cb0565b90508281526020810184848401111561102657611025610fb2565b5b611031848285610fe8565b509392505050565b600082601f83011261104e5761104d610c3a565b5b813561105e848260208601610ff7565b91505092915050565b60006020828403121561107d5761107c610c04565b5b600082013567ffffffffffffffff81111561109b5761109a610c09565b5b6110a784828501611039565b91505092915050565b60008115159050919050565b6110c5816110b0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111055780820151818401526020810190506110ea565b60008484015250505050565b600061111c826110cb565b61112681856110d6565b93506111368185602086016110e7565b61113f81610c3f565b840191505092915050565b600060408201905061115f60008301856110bc565b81810360208301526111718184611111565b90509392505050565b600060408201905061118f6000830185610ef6565b61119c6020830184610ef6565b9392505050565b60006080820190506111b86000830187610bd0565b6111c56020830186610bd0565b6111d26040830185610bd0565b6111df6060830184610bd0565b95945050505050565b6000819050919050565b6111fb816111e8565b82525050565b600067ffffffffffffffff82169050919050565b61121e81611201565b82525050565b600061ffff82169050919050565b61123b81611224565b82525050565b600063ffffffff82169050919050565b61125a81611241565b82525050565b600060a08201905061127560008301886111f2565b6112826020830187611215565b61128f6040830186611232565b61129c6060830185611251565b6112a96080830184611251565b9695505050505050565b6000815190506112c281610c0e565b92915050565b6000602082840312156112de576112dd610c04565b5b60006112ec848285016112b3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135e82610bc6565b915061136983610bc6565b925082820390508181111561138157611380611324565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113c182610bc6565b91506113cc83610bc6565b9250826113dc576113db611387565b5b828206905092915050565b600081905092915050565b50565b60006114026000836113e7565b915061140d826113f2565b600082019050919050565b6000611423826113f5565b915081905091905056fea26469706673582212205ec0407c505063c0894ddb131f7565328817c4aa7cacde84d63021b1a71b45f164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636e04ff0d116100595780636e04ff0d1461025857806391ad27b414610296578063c1af5785146102c1578063fd6673f5146102cb576100c2565b806353a2c19a146101d75780635f1b0fd8146102025780636b68c03c1461022d576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063460e20491461016f578063473f1ddc146101ac575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bdf565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d93565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610bdf565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e4a565b6103e8565b005b34801561017b57600080fd5b5061019660048036038101906101919190610e97565b6105fa565b6040516101a39190610f05565b60405180910390f35b3480156101b857600080fd5b506101c1610641565b6040516101ce9190610f05565b60405180910390f35b3480156101e357600080fd5b506101ec61066b565b6040516101f99190610bdf565b60405180910390f35b34801561020e57600080fd5b5061021761067a565b6040516102249190610bdf565b60405180910390f35b34801561023957600080fd5b50610242610687565b60405161024f9190610f97565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a9190611067565b61069e565b60405161028d92919061114a565b60405180910390f35b3480156102a257600080fd5b506102ab61074b565b6040516102b89190610bdf565b60405180910390f35b6102c9610773565b005b3480156102d757600080fd5b506102e06108e2565b6040516102ed9190610bdf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061117a565b60405180910390fd5b6103da82826108ee565b5050565b6000600254905090565b60006104026040518060200160405280600081525061069e565b509050806104935747600080549050600160149054906101000a900460ff16600181111561043357610432610f20565b5b7f00000000000000000000000000000000000000000000000000000000000000006040517f09e1012e00000000000000000000000000000000000000000000000000000000815260040161048a94939291906111a3565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104b8576104b7610f20565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610582959493929190611260565b6020604051808303816000875af11580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c591906112c8565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b600080828154811061060f5761060e6112f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106c6576106c5610f20565b5b600060018111156106da576106d9610f20565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070e9190611353565b1190506000806000805490501190506000804711905083801561072e5750825b80156107375750815b80156107405750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107cd576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107e1576107e0610f20565b5b600160149054906101000a900460ff16600181111561080357610802610f20565b5b1461083a576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008080549050905090565b6000808054905082600081518110610909576109086112f5565b5b602002602001015161091b91906113b6565b90506000808281548110610932576109316112f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109c6576109c5610f20565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109f190611418565b60006040518083038185875af1925050503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b5050905080610a6e576040517f061104de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610acc57610acb610c50565b5b604051908082528060200260200182016040528015610afa5781602001602082028036833780820191505090505b5060009080519060200190610b10929190610b1f565b50426002819055505050505050565b828054828255906000526020600020908101928215610b98579160200282015b82811115610b975782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3f565b5b509050610ba59190610ba9565b5090565b5b80821115610bc2576000816000905550600101610baa565b5090565b6000819050919050565b610bd981610bc6565b82525050565b6000602082019050610bf46000830184610bd0565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1781610bc6565b8114610c2257600080fd5b50565b600081359050610c3481610c0e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8882610c3f565b810181811067ffffffffffffffff82111715610ca757610ca6610c50565b5b80604052505050565b6000610cba610bfa565b9050610cc68282610c7f565b919050565b600067ffffffffffffffff821115610ce657610ce5610c50565b5b602082029050602081019050919050565b600080fd5b6000610d0f610d0a84610ccb565b610cb0565b90508083825260208201905060208402830185811115610d3257610d31610cf7565b5b835b81811015610d5b5780610d478882610c25565b845260208401935050602081019050610d34565b5050509392505050565b600082601f830112610d7a57610d79610c3a565b5b8135610d8a848260208601610cfc565b91505092915050565b60008060408385031215610daa57610da9610c04565b5b6000610db885828601610c25565b925050602083013567ffffffffffffffff811115610dd957610dd8610c09565b5b610de585828601610d65565b9150509250929050565b600080fd5b60008083601f840112610e0a57610e09610c3a565b5b8235905067ffffffffffffffff811115610e2757610e26610def565b5b602083019150836001820283011115610e4357610e42610cf7565b5b9250929050565b60008060208385031215610e6157610e60610c04565b5b600083013567ffffffffffffffff811115610e7f57610e7e610c09565b5b610e8b85828601610df4565b92509250509250929050565b600060208284031215610ead57610eac610c04565b5b6000610ebb84828501610c25565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eef82610ec4565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f6057610f5f610f20565b5b50565b6000819050610f7182610f4f565b919050565b6000610f8182610f63565b9050919050565b610f9181610f76565b82525050565b6000602082019050610fac6000830184610f88565b92915050565b600080fd5b600067ffffffffffffffff821115610fd257610fd1610c50565b5b610fdb82610c3f565b9050602081019050919050565b82818337600083830152505050565b600061100a61100584610fb7565b610cb0565b90508281526020810184848401111561102657611025610fb2565b5b611031848285610fe8565b509392505050565b600082601f83011261104e5761104d610c3a565b5b813561105e848260208601610ff7565b91505092915050565b60006020828403121561107d5761107c610c04565b5b600082013567ffffffffffffffff81111561109b5761109a610c09565b5b6110a784828501611039565b91505092915050565b60008115159050919050565b6110c5816110b0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111055780820151818401526020810190506110ea565b60008484015250505050565b600061111c826110cb565b61112681856110d6565b93506111368185602086016110e7565b61113f81610c3f565b840191505092915050565b600060408201905061115f60008301856110bc565b81810360208301526111718184611111565b90509392505050565b600060408201905061118f6000830185610ef6565b61119c6020830184610ef6565b9392505050565b60006080820190506111b86000830187610bd0565b6111c56020830186610bd0565b6111d26040830185610bd0565b6111df6060830184610bd0565b95945050505050565b6000819050919050565b6111fb816111e8565b82525050565b600067ffffffffffffffff82169050919050565b61121e81611201565b82525050565b600061ffff82169050919050565b61123b81611224565b82525050565b600063ffffffff82169050919050565b61125a81611241565b82525050565b600060a08201905061127560008301886111f2565b6112826020830187611215565b61128f6040830186611232565b61129c6060830185611251565b6112a96080830184611251565b9695505050505050565b6000815190506112c281610c0e565b92915050565b6000602082840312156112de576112dd610c04565b5b60006112ec848285016112b3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135e82610bc6565b915061136983610bc6565b925082820390508181111561138157611380611324565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113c182610bc6565b91506113cc83610bc6565b9250826113dc576113db611387565b5b828206905092915050565b600081905092915050565b50565b60006114026000836113e7565b915061140d826113f2565b600082019050919050565b6000611423826113f5565b915081905091905056fea26469706673582212205ec0407c505063c0894ddb131f7565328817c4aa7cacde84d63021b1a71b45f164736f6c63430008120033",
  "devdoc": {
    "author": "Jatin Kalra",
    "details": "This implements Chainlink VRF V2 & Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This function is called by Chainlink Keepers nodes to determine if the upkeep is true.The following conditions must be true to return `true`:   i. time interval should have passed.   ii. The lottery should have at least 1 player and have some ETH.   iii. Our subscription is funded with LINK.   iv. The lottery should be in an \"open\" state.checkUpkeep and performUpkeep reference: https://docs.chain.link/chainlink-automation/compatible-contracts",
        "returns": {
          "upkeepNeeded": "True if the conditions for selecting a new random winner are met, false otherwise."
        }
      },
      "constructor": {
        "params": {
          "callbackGasLimit": "The gas limit for the callback request to fulfill the random number.",
          "entranceFee": "The minimum price required to enter the lottery.",
          "gasLane": "The unique identifier (keyHash) for the VRF system to generate random numbers. Max gas price.",
          "interval": "The interval between each winner selection.",
          "subscriptionId": "The unique subscription ID used for funding VRF requests.",
          "vrfCoordinatorV2": "The address of the VRFCoordinatorV2 contract."
        }
      },
      "enterLottery()": {
        "details": "Participants must send an amount of Ether greater than or equal to the entrance fee.The lottery must be in an \"open\" state to allow entries.Emits the `LotteryEnter` event when a participant successfully enters the lottery.Throws a `Lottery__NotEnoughETHEntered` error if the participant does not send enough Ether.Throws a `Lottery__NotOpen` error if the lottery is not in an \"open\" state."
      },
      "performUpkeep(bytes)": {
        "details": "This function is called by Chainlink Keepers when the conditions for selecting a new winner are met.Throws a `Lottery__checkUpkeepFalse` error if the conditions for selecting a new winner are not met.Emits the `RequestedLotteryWinner` event when a new winner is requested."
      }
    },
    "title": "A sample lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Checks if it's time to select a new random winner and restart the lottery."
      },
      "constructor": {
        "notice": "Constructs a new Lottery contract with the parameters set here."
      },
      "enterLottery()": {
        "notice": "Allows a participant to enter the lottery by paying the entrance fee."
      },
      "performUpkeep(bytes)": {
        "notice": "Performs the upkeep and selects a new random winner for the lottery."
      }
    },
    "notice": "A contract for creating an untamperable decentralised smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1168,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1185,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1188,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)1163"
      },
      {
        "astId": 1190,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)1163": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}